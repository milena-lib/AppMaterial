{
    "pipes": [
        {
            "name": "ArrayFilterPipe",
            "id": "pipe-ArrayFilterPipe-476825841ae572cebcd4144d6c9eeea6906834c75233d5b543519dba04367a404ec07449137a572857bd357aba389435021acf38c6470a9ce709941cec4840b1",
            "file": "src/app/drag-and-drop2/array.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Pipe used to filter array, takes input array and\narray of 2 arguments, key of object and search term\nif key does not exist, pipe assumes the item is string</p>\n",
            "rawdescription": "\n\nPipe used to filter array, takes input array and\narray of 2 arguments, key of object and search term\nif key does not exist, pipe assumes the item is string\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "array",
                            "type": "Array<literal type>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array | Array",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "Array<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "arrayFilter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\ndeclare var require: any;\nconst orderby = require('lodash.orderby');\n\n/**\n * Utility class to not hardcode sort directions\n */\n export class SortOptions {\n  /*\n   * Static property to defined ASC and DESC values\n   * to avoid hardcoding and repeating\n   * replaces string enums\n   */\n  static direction: {\n    ASC: string,\n    DESC: string,\n  } = {\n      ASC: 'ASC',\n      DESC: 'DESC',\n    };\n}\n\n/**\n * Pipe used to sort arrays by using lodash\n * Takes array and array of 2 strings(parameters), key and direction\n * direction must be either ASC or DESC\n */\n\n@Pipe({\n  name: 'arraySort'\n})\nexport class ArraySortPipe implements PipeTransform {\n\n  transform(array: Array<{}>, args: string[]): Array<string> | Array<{}> {\n\n    array = array || [];\n\n    if (typeof args === 'undefined' || args.length !== 2) {\n      return array;\n    }\n\n    const [key, direction] = args;\n\n    if (direction !== SortOptions.direction.ASC && direction !== SortOptions.direction.DESC) {\n      return array;\n    }\n\n    // if there is no key we assume item is of string type\n    return orderby(array, (item: {} | string) => item.hasOwnProperty(key) ? item[key] : item, direction.toLowerCase());\n  }\n\n}\n\n/**\n * Pipe used to filter array, takes input array and\n * array of 2 arguments, key of object and search term\n * if key does not exist, pipe assumes the item is string\n */\n @Pipe({\n  name: 'arrayFilter',\n})\nexport class ArrayFilterPipe implements PipeTransform {\n\n  transform(array: Array<{}>, args: string[]): Array<string> | Array<{}> {\n\n    array = array || [];\n\n    if (typeof args === 'undefined' || args.length !== 2) {\n      return array;\n    }\n\n    const [key, searchTerm] = args;\n\n    if (searchTerm.trim() === '') {\n      return array;\n    }\n\n    return array.filter((item: {}) => item[key].toString().toLowerCase().search(searchTerm.toLowerCase().trim()) >= 0);\n  }\n}\n"
        },
        {
            "name": "ArraySortPipe",
            "id": "pipe-ArraySortPipe-476825841ae572cebcd4144d6c9eeea6906834c75233d5b543519dba04367a404ec07449137a572857bd357aba389435021acf38c6470a9ce709941cec4840b1",
            "file": "src/app/drag-and-drop2/array.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Pipe used to sort arrays by using lodash\nTakes array and array of 2 strings(parameters), key and direction\ndirection must be either ASC or DESC</p>\n",
            "rawdescription": "\n\nPipe used to sort arrays by using lodash\nTakes array and array of 2 strings(parameters), key and direction\ndirection must be either ASC or DESC\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "array",
                            "type": "Array<literal type>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array | Array",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "Array<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "arraySort",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\ndeclare var require: any;\nconst orderby = require('lodash.orderby');\n\n/**\n * Utility class to not hardcode sort directions\n */\n export class SortOptions {\n  /*\n   * Static property to defined ASC and DESC values\n   * to avoid hardcoding and repeating\n   * replaces string enums\n   */\n  static direction: {\n    ASC: string,\n    DESC: string,\n  } = {\n      ASC: 'ASC',\n      DESC: 'DESC',\n    };\n}\n\n/**\n * Pipe used to sort arrays by using lodash\n * Takes array and array of 2 strings(parameters), key and direction\n * direction must be either ASC or DESC\n */\n\n@Pipe({\n  name: 'arraySort'\n})\nexport class ArraySortPipe implements PipeTransform {\n\n  transform(array: Array<{}>, args: string[]): Array<string> | Array<{}> {\n\n    array = array || [];\n\n    if (typeof args === 'undefined' || args.length !== 2) {\n      return array;\n    }\n\n    const [key, direction] = args;\n\n    if (direction !== SortOptions.direction.ASC && direction !== SortOptions.direction.DESC) {\n      return array;\n    }\n\n    // if there is no key we assume item is of string type\n    return orderby(array, (item: {} | string) => item.hasOwnProperty(key) ? item[key] : item, direction.toLowerCase());\n  }\n\n}\n\n/**\n * Pipe used to filter array, takes input array and\n * array of 2 arguments, key of object and search term\n * if key does not exist, pipe assumes the item is string\n */\n @Pipe({\n  name: 'arrayFilter',\n})\nexport class ArrayFilterPipe implements PipeTransform {\n\n  transform(array: Array<{}>, args: string[]): Array<string> | Array<{}> {\n\n    array = array || [];\n\n    if (typeof args === 'undefined' || args.length !== 2) {\n      return array;\n    }\n\n    const [key, searchTerm] = args;\n\n    if (searchTerm.trim() === '') {\n      return array;\n    }\n\n    return array.filter((item: {}) => item[key].toString().toLowerCase().search(searchTerm.toLowerCase().trim()) >= 0);\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AreaGroup",
            "id": "interface-AreaGroup-2b1f1aad29fe79dafc33069eb8426ee3bbfc7b98e75cfe80764d7748c971b7b478dce5d4e6e85dfff03c115c8651cadf001e264bb096e17db012496a7980af14",
            "file": "src/app/multiselect/multiselect.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-multiselect',\n  templateUrl: './multiselect.component.html',\n  styleUrls: ['./multiselect.component.scss']\n})\nexport class MultiselectComponent implements OnInit {\n  areaControl = new FormControl();\n  areaGroups: AreaGroup[] = [\n    {\n      name: '',\n      disabled: false,\n      cities: [\n        {value: 'Bat Yam', viewValue: 'בת ים', checked: false},\n        {value: 'Arial', viewValue: 'אריאל', checked: false},\n        {value: 'Givatayim', viewValue: 'גבעתיים', checked: false}\n      ],\n      completed: false\n    },\n    {\n      name: 'צפון',\n      disabled: false,\n      cities: [\n        {value: 'Haifa', viewValue: 'חיפה', checked: false},\n        {value: 'Karmiel', viewValue: 'כרמיאל', checked: false},\n        {value: 'Nazaret', viewValue: 'נצרת', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'מרכז',\n      disabled: false,\n      cities: [\n        {value: 'Tel Aviv', viewValue: 'תל אביב', checked: false},\n        {value: 'Ramat Gan', viewValue: 'רמת גן', checked: false},\n        {value: 'Petah Tikva', viewValue: 'פתח תקווה', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'שפלה',\n      disabled: true,\n      cities: [\n        {value: 'Ashdod', viewValue: 'אשדוד', checked: false},\n        {value: 'Lod', viewValue: 'לוד', checked: false},\n        {value: 'Yavne', viewValue: 'יבנה', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'דרום',\n      disabled: false,\n      cities: [\n        {value: 'Beer Sheva', viewValue: 'באר שבע', checked: false},\n        {value: 'Eilat', viewValue: 'אילת', checked: false},\n      ],\n      completed: false\n    },\n  ];\n  \n  selectedValues = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    \n  }\n\n  someComplete(group: AreaGroup): boolean {\n    if (group.cities == null) {\n      return false;\n    }\n\n    return group.cities.filter(t => t.checked).length > 0 && !group.completed;\n  }\n\n  setAll(completed: boolean, group: AreaGroup) {\n    group.completed = completed;\n    if (group.cities == null) {\n      return;\n    }\n    \n    group.cities.forEach(t => {\n      t.checked = completed;\n    });\n    \n    const selecteds = this.updateSelected();\n    this.selectedValues = selecteds.reduce(function(a, b){ return a.concat(b); }, []);\n\n    // console.log(\"selectedAllValues: \", this.selectedValues);\n    \n    this.areaControl.setValue(this.selectedValues);\n  }\n\n  setSelected(sel: boolean, group: AreaGroup, index: number) {\n    group.cities[index].checked = sel;\n\n    group.completed = sel ? (group.cities.filter(x => x.checked)?.length === group.cities.length ? true : false) : false;\n    \n    const selecteds = this.updateSelected();\n    this.selectedValues = selecteds.reduce(function(a, b){ return a.concat(b); }, []);\n\n    // console.log(\"selectedValues: \", this.selectedValues);\n  }\n\n  updateSelected(): any[] {\n    let temp=[];\n    let gr;\n    this.areaGroups.forEach(itemGroup => {\n      if(itemGroup.cities.filter(x => x.checked)?.length) {\n        gr = itemGroup.cities.filter(x => x.checked).map(y => y.value);   \n        temp.push(gr); \n      }\n    });\n\n    return temp;\n  }\n\n  getSelections() {\n    debugger;\n    console.log(\"areaGroups: \", this.areaGroups);\n  }\n\n}\n\ninterface City {\n  value: string;\n  viewValue: string;\n  checked: boolean;\n}\n\ninterface AreaGroup {\n  disabled?: boolean;\n  name: string;\n  cities: City[];\n  completed: boolean\n}",
            "properties": [
                {
                    "name": "cities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "City[]",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "completed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 136
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "City",
            "id": "interface-City-2b1f1aad29fe79dafc33069eb8426ee3bbfc7b98e75cfe80764d7748c971b7b478dce5d4e6e85dfff03c115c8651cadf001e264bb096e17db012496a7980af14",
            "file": "src/app/multiselect/multiselect.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-multiselect',\n  templateUrl: './multiselect.component.html',\n  styleUrls: ['./multiselect.component.scss']\n})\nexport class MultiselectComponent implements OnInit {\n  areaControl = new FormControl();\n  areaGroups: AreaGroup[] = [\n    {\n      name: '',\n      disabled: false,\n      cities: [\n        {value: 'Bat Yam', viewValue: 'בת ים', checked: false},\n        {value: 'Arial', viewValue: 'אריאל', checked: false},\n        {value: 'Givatayim', viewValue: 'גבעתיים', checked: false}\n      ],\n      completed: false\n    },\n    {\n      name: 'צפון',\n      disabled: false,\n      cities: [\n        {value: 'Haifa', viewValue: 'חיפה', checked: false},\n        {value: 'Karmiel', viewValue: 'כרמיאל', checked: false},\n        {value: 'Nazaret', viewValue: 'נצרת', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'מרכז',\n      disabled: false,\n      cities: [\n        {value: 'Tel Aviv', viewValue: 'תל אביב', checked: false},\n        {value: 'Ramat Gan', viewValue: 'רמת גן', checked: false},\n        {value: 'Petah Tikva', viewValue: 'פתח תקווה', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'שפלה',\n      disabled: true,\n      cities: [\n        {value: 'Ashdod', viewValue: 'אשדוד', checked: false},\n        {value: 'Lod', viewValue: 'לוד', checked: false},\n        {value: 'Yavne', viewValue: 'יבנה', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'דרום',\n      disabled: false,\n      cities: [\n        {value: 'Beer Sheva', viewValue: 'באר שבע', checked: false},\n        {value: 'Eilat', viewValue: 'אילת', checked: false},\n      ],\n      completed: false\n    },\n  ];\n  \n  selectedValues = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    \n  }\n\n  someComplete(group: AreaGroup): boolean {\n    if (group.cities == null) {\n      return false;\n    }\n\n    return group.cities.filter(t => t.checked).length > 0 && !group.completed;\n  }\n\n  setAll(completed: boolean, group: AreaGroup) {\n    group.completed = completed;\n    if (group.cities == null) {\n      return;\n    }\n    \n    group.cities.forEach(t => {\n      t.checked = completed;\n    });\n    \n    const selecteds = this.updateSelected();\n    this.selectedValues = selecteds.reduce(function(a, b){ return a.concat(b); }, []);\n\n    // console.log(\"selectedAllValues: \", this.selectedValues);\n    \n    this.areaControl.setValue(this.selectedValues);\n  }\n\n  setSelected(sel: boolean, group: AreaGroup, index: number) {\n    group.cities[index].checked = sel;\n\n    group.completed = sel ? (group.cities.filter(x => x.checked)?.length === group.cities.length ? true : false) : false;\n    \n    const selecteds = this.updateSelected();\n    this.selectedValues = selecteds.reduce(function(a, b){ return a.concat(b); }, []);\n\n    // console.log(\"selectedValues: \", this.selectedValues);\n  }\n\n  updateSelected(): any[] {\n    let temp=[];\n    let gr;\n    this.areaGroups.forEach(itemGroup => {\n      if(itemGroup.cities.filter(x => x.checked)?.length) {\n        gr = itemGroup.cities.filter(x => x.checked).map(y => y.value);   \n        temp.push(gr); \n      }\n    });\n\n    return temp;\n  }\n\n  getSelections() {\n    debugger;\n    console.log(\"areaGroups: \", this.areaGroups);\n  }\n\n}\n\ninterface City {\n  value: string;\n  viewValue: string;\n  checked: boolean;\n}\n\ninterface AreaGroup {\n  disabled?: boolean;\n  name: string;\n  cities: City[];\n  completed: boolean\n}",
            "properties": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "viewValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 130
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IColumn",
            "id": "interface-IColumn-bef689a204669fcae17fc3c92438a42b47609d981e4a87700cf794403b826b185933e51739e81cc4796a208bb032e0808cd7da8e768f97d69f29025ec50224ea",
            "file": "src/app/grid/i-column.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GridColumnTypeEnum } from \"./enums\";\r\n\r\nexport interface IColumn {\r\n    headerText: string;\r\n    dataField: string;\r\n    dataType: GridColumnTypeEnum;\r\n    cssClass: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "cssClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "dataField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dataType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GridColumnTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "headerText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICustomGridModel",
            "id": "interface-ICustomGridModel-03ba3b92f05505cf602a8c3cf9278e31ac7b89925a0122c8d75e21175cabb121407b45cb84232030a173b6e9d1a57593bd8064b8f07daec4225b21120d37dc15",
            "file": "src/app/grid/i-custom-grid-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IColumn } from \"./i-column\";\r\n\r\nexport interface ICustomGridModel {\r\n    dataSource: Array<any>;\r\n    columns: Array<IColumn>;\r\n}\r\n",
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IColumn>",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IGridEvents",
            "id": "interface-IGridEvents-00646632345cf75e44a63c57cb54a662b77207fcd56860f63e1d103d84fa139aea48f9bc2fe90160ec7e884eabe0040f7818660ddef6dedfd537ec26ffba1fd3",
            "file": "src/app/interfaces/i-grid-events.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IColumn } from \"../grid/i-column\";\r\n\r\nexport interface IGridEvents {\r\n    row: any;\r\n    column: IColumn;\r\n    component: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IItemsMovedEvent",
            "id": "interface-IItemsMovedEvent-9c167cc022775fd092bcbb9352fc8fa499e5563870ed7da32fba3d6066f0d1e71db18a729c5e35f11f1167b33c4b6a55c9850e03d7e2e1f9b6b2705974b456d2",
            "file": "src/app/drag-and-drop2/dual-list-box.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IListBoxItem {\n    value: string;\n    text: string;\n  }\n  /**\n  * Helper interface to emit event when\n  * items are moved between boxes\n  */\n  export interface IItemsMovedEvent {\n    available: Array<{}>;\n    selected: Array<{}>;\n    movedItems: Array<{}>;\n    from: 'selected' | 'available';\n    to: 'selected' | 'available';\n  }\n  ",
            "properties": [
                {
                    "name": "available",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"selected\" | \"available\"",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "movedItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"selected\" | \"available\"",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Helper interface to emit event when\nitems are moved between boxes</p>\n",
            "rawdescription": "\n\nHelper interface to emit event when\nitems are moved between boxes\n",
            "methods": []
        },
        {
            "name": "IListBoxItem",
            "id": "interface-IListBoxItem-9c167cc022775fd092bcbb9352fc8fa499e5563870ed7da32fba3d6066f0d1e71db18a729c5e35f11f1167b33c4b6a55c9850e03d7e2e1f9b6b2705974b456d2",
            "file": "src/app/drag-and-drop2/dual-list-box.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IListBoxItem {\n    value: string;\n    text: string;\n  }\n  /**\n  * Helper interface to emit event when\n  * items are moved between boxes\n  */\n  export interface IItemsMovedEvent {\n    available: Array<{}>;\n    selected: Array<{}>;\n    movedItems: Array<{}>;\n    from: 'selected' | 'available';\n    to: 'selected' | 'available';\n  }\n  ",
            "properties": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Helper interface for listbox items</p>\n",
            "rawdescription": "\n\nHelper interface for listbox items\n",
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DataService",
            "id": "injectable-DataService-528c3c4353322c197b52ff0f95ac73cee4ecd05b4311d07e882c946e58990c294dbddb1a1f424cae57e6447cf698cd23a4e4faf017f3e51f5b3ba2ac6ef0998b",
            "file": "src/app/services/data-service.service.ts",
            "properties": [
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "urlData1",
                    "defaultValue": "\"//jsonplaceholder.typicode.com/posts?id=1\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "urlData2",
                    "defaultValue": "\"//jsonplaceholder.typicode.com/posts?id=2\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "userDataLoadedEmitter",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserData1",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserData2",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "response",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { EventEmitter, Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n  userDataLoadedEmitter: EventEmitter<any> = new EventEmitter<any>();\r\n  \r\n  private userData: any;\r\n\r\n  private setData(response){\r\n    debugger;\r\n    this.userData = response;\r\n    this.userDataLoadedEmitter.emit(null);\r\n  }\r\n  getData(){\r\n    debugger;\r\n    return this.userData;\r\n  }\r\n\r\n  urlData1 = \"//jsonplaceholder.typicode.com/posts?id=1\";\r\n  urlData2 = \"//jsonplaceholder.typicode.com/posts?id=2\";\r\n\r\n\r\n  constructor(public http: HttpClient) { }\r\n\r\n  getUserData1(): Observable<any> {\r\n    return this.http.get(this.urlData1, {}).pipe(map(data => {\r\n      // debugger;\r\n      // console.log(\"urlData1: \", data);\r\n    }),\r\n    mergeMap(data=> this.http.get(this.urlData2, {}).pipe(map(data => {\r\n      // console.log(\"urlData2: \", data);\r\n      return data;\r\n      \r\n    }),\r\n      catchError(err => {\r\n        // console.log(\"err9876: \", err);\r\n        return throwError(err);\r\n      })\r\n    )));\r\n  }\r\n\r\n  getUserData2(): Observable<any> {\r\n    return this.http.get(this.urlData1, {}).pipe(\r\n      switchMap(data=> this.http.get(this.urlData2, {}).pipe(map(data1 =>{\r\n        // console.log(\"urlData1: \", data);\r\n        // console.log(\"urlData2: \", data1);\r\n        return data1;\r\n      }))\r\n      ),\r\n      catchError(err => {\r\n        // console.log(\"err9876: \", err);\r\n        return throwError(err);\r\n      })\r\n    );\r\n  }\r\n\r\n  // setUser1DataByApi(){\r\n  //   this.http.get('//jsonplaceholder.typicode.com/users?id=1').toPromise()\r\n  //            .then((response)=>{\r\n  //               this.setData(response);\r\n  //            })\r\n  //            .catch(ex=>console.log('ex', ex));\r\n  // }\r\n\r\n  // setUser2DataByApi(){\r\n  //   return new Promise((resolve, reject) => {\r\n  //                  this.http.get('//jsonplaceholder.typicode.com/users?id=2').toPromise()\r\n  //                   .then((response)=>{\r\n  //                     resolve(response)\r\n  //                   }).catch( ex=>reject(ex));\r\n  //  })\r\n  // }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HelperService",
            "id": "injectable-HelperService-6859fafa016b5322ec614750a305330d3a17b70af4ade13d9d57f163292fac206a58a0298de32c8b40e60ece8ca0158c246c9bbf750c38a01710fc2f3f95f112",
            "file": "src/app/services/helper.service.ts",
            "properties": [
                {
                    "name": "gridEvent$",
                    "defaultValue": "new Subject<IGridEvents>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "isMobile",
                    "defaultValue": "window.innerWidth <= 360 ? true : false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSubmitForm$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getSubmitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setGridEvent",
                    "args": [
                        {
                            "name": "row",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "componentName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSubmitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { IGridEvents } from '../interfaces/i-grid-events';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HelperService {\r\n  public isMobile: boolean = window.innerWidth <= 360 ? true : false;\r\n  constructor() { }\r\n\r\n  readonly gridEvent$ = new Subject<IGridEvents>();\r\n  readonly isSubmitForm$ = new Subject<boolean>();\r\n\r\n  setGridEvent(row, column, componentName) {\r\n    let gridEvent: IGridEvents;\r\n    gridEvent.row = row;\r\n    gridEvent.column = column;\r\n    gridEvent.component = componentName;\r\n    \r\n    this.gridEvent$.next(gridEvent);\r\n  }\r\n\r\n  setSubmitForm() {\r\n    this.isSubmitForm$.next(true);\r\n  }\r\n\r\n  getSubmitForm() {\r\n    return this.isSubmitForm$;\r\n  }\r\n  \r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "ProductService",
            "id": "injectable-ProductService-00d89b2cf6bb65a86ba1cd53384a173231d4f7c5bb8b85fb2b3fac6946945ecf197764c731972c393d03bc0b59bfa0e894634650c48f043f424e30a60e835d6e",
            "file": "src/app/services/product.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Product } from '../classes/product';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n  public getProducts() {\r\n \r\n    let products:Product[];\r\n\r\n    products=[\r\n        new Product(1,'iPhone',500),\r\n        new Product(2,'Samsung',750),\r\n        new Product(3,'Nokia',300),\r\n        new Product(4,'Motorola',150),\r\n        new Product(5,'Xiomi',120),\r\n        new Product(6,'Meizo',100)\r\n    ]\r\n\r\n    return products;       \r\n  }\r\n\r\n  public getProduct(id) {\r\n      let products:Product[]=this.getProducts();\r\n      return products.find(p => p.productID==id);\r\n  }\r\n}\r\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "CardsGuard",
            "id": "class-CardsGuard-2cd88a60e495b33a581f06739b3ad5bc5834cd50a4b9b576872b13385cc9698ff36f70c17d6deefd5288d709b9d1cfcb38dfa6fc0ce1de2078fc0bfe74f4c68b",
            "file": "src/app/cards/cards.guard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "guard",
            "sourceCode": "import {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot} from \"@angular/router\";\r\nimport {Observable} from \"rxjs\";\r\n \r\nexport class CardsGuard implements CanActivate{\r\n \r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable<boolean> | boolean{\r\n        // получаем id\r\n        //console.log(route.params['id']);\r\n        return confirm('Вы уверены, что хотите перейти?');\r\n        //return false; \r\n    }\r\n}",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | boolean",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "CanActivate"
            ]
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-216456583e25428faed77a4328eb6552448b3ca5a60c594cca6093d48f5332766845debfe0c05c76cc89e95f1f958caf3ad9253a229c2cc3a570b8ec03f2b4c7",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Product",
            "id": "class-Product-bc1fe11680482139c816ae0e079ec67e0b3ec2b56cbfa0f2a245ab15cad6891dd11dfd92a812ce5e917bd93ddda5c9da3eb7dc7ec2ae9452edfffa8a2ca90d8e",
            "file": "src/app/classes/product.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Product { \r\n \r\n    constructor(productID:number, name: string, price: number) {\r\n        this.productID=productID;\r\n        this.name=name;\r\n        this.price=price;\r\n    }\r\n \r\n    productID:number;\r\n    name: string;\r\n    price:number;\r\n \r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productID",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "price",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "productID",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "price",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "productID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SortOptions",
            "id": "class-SortOptions-476825841ae572cebcd4144d6c9eeea6906834c75233d5b543519dba04367a404ec07449137a572857bd357aba389435021acf38c6470a9ce709941cec4840b1",
            "file": "src/app/drag-and-drop2/array.pipe.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\ndeclare var require: any;\nconst orderby = require('lodash.orderby');\n\n/**\n * Utility class to not hardcode sort directions\n */\n export class SortOptions {\n  /*\n   * Static property to defined ASC and DESC values\n   * to avoid hardcoding and repeating\n   * replaces string enums\n   */\n  static direction: {\n    ASC: string,\n    DESC: string,\n  } = {\n      ASC: 'ASC',\n      DESC: 'DESC',\n    };\n}\n\n/**\n * Pipe used to sort arrays by using lodash\n * Takes array and array of 2 strings(parameters), key and direction\n * direction must be either ASC or DESC\n */\n\n@Pipe({\n  name: 'arraySort'\n})\nexport class ArraySortPipe implements PipeTransform {\n\n  transform(array: Array<{}>, args: string[]): Array<string> | Array<{}> {\n\n    array = array || [];\n\n    if (typeof args === 'undefined' || args.length !== 2) {\n      return array;\n    }\n\n    const [key, direction] = args;\n\n    if (direction !== SortOptions.direction.ASC && direction !== SortOptions.direction.DESC) {\n      return array;\n    }\n\n    // if there is no key we assume item is of string type\n    return orderby(array, (item: {} | string) => item.hasOwnProperty(key) ? item[key] : item, direction.toLowerCase());\n  }\n\n}\n\n/**\n * Pipe used to filter array, takes input array and\n * array of 2 arguments, key of object and search term\n * if key does not exist, pipe assumes the item is string\n */\n @Pipe({\n  name: 'arrayFilter',\n})\nexport class ArrayFilterPipe implements PipeTransform {\n\n  transform(array: Array<{}>, args: string[]): Array<string> | Array<{}> {\n\n    array = array || [];\n\n    if (typeof args === 'undefined' || args.length !== 2) {\n      return array;\n    }\n\n    const [key, searchTerm] = args;\n\n    if (searchTerm.trim() === '') {\n      return array;\n    }\n\n    return array.filter((item: {}) => item[key].toString().toLowerCase().search(searchTerm.toLowerCase().trim()) >= 0);\n  }\n}\n",
            "properties": [
                {
                    "name": "direction",
                    "defaultValue": "{\n      ASC: 'ASC',\n      DESC: 'DESC',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "description": "<p>Utility class to not hardcode sort directions</p>\n",
            "rawdescription": "\n\nUtility class to not hardcode sort directions\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-5f85100e679e52eabcb006b07e49057aba5c87aa2ddab2795ba7c8ff5feee6a1a6a7044a66faacbd1361bf920d1cd985c6f28b9bb93735caa886d6e0ba28abb1",
            "file": "src/app/directives/click-outside.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appClickOutside]'\r\n})\r\nexport class ClickOutsideDirective {\r\n  @Output() clickOutsideElement = new EventEmitter<void>();\r\n\r\n  constructor(private elementRef: ElementRef) {\r\n  }\r\n\r\n  @HostListener('document:click', ['$event.target'])\r\n  public onClick(target) {\r\n    // debugger;\r\n    const clickedInside = this.elementRef.nativeElement.contains(target);\r\n    if (!clickedInside) {\r\n      console.log('outside click xx');\r\n      this.clickOutsideElement.emit();\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[appClickOutside]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickOutsideElement",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DragAndDropDirective",
            "id": "directive-DragAndDropDirective-36db659ed4ec54f4dcd4e6500e2562a86ee856982d10153fbea0a641f18948023f625ffea76bde455d8e24ed83fb96d3e28a552ad0111c7a3913b2f14168ca27",
            "file": "src/app/drag-and-drop/drag-and-drop.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { Subject } from 'rxjs/internal/Subject';\n\n@Directive({\n  selector: '[appDragAndDrop]'\n})\nexport class DragAndDropDirective {\n  dragEl$ = new Subject();\n  element: HTMLElement;\n\n  constructor(el: ElementRef) {\n    this.element = el.nativeElement;\n  }\n\n  ngOnInit() {}\n  @HostListener('dragstart', ['$event']) handleDragStart(e) {\n    //debugger;\n    this.element.style.opacity = '0.4';\n    // console.log(this.element.innerHTML);\n    this.dragEl$.next(this.element);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text', e.innerHTML);\n  }\n\n  @HostListener('dragover', ['$event']) handleDragOver(e) {\n    if (e.preventDefault) {\n      e.preventDefault();\n    }\n\n    e.dataTransfer.dropEffect = 'move';\n\n    return false;\n  }\n\n  @HostListener('dragenter', ['$event']) handleDragEnter(e) {\n    this.element.classList.add('over');\n  }\n\n  @HostListener('dragleave', ['$event']) handleDragLeave(e) {\n    this.element.classList.remove('over');\n  }\n\n  @HostListener('drop', ['$event']) handleDrop(e) {\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    }\n    // debugger;\n    var data;\n    this.dragEl$.subscribe((val) => {\n      console.log('val', val);\n      data = val;\n    });\n    console.log('if (' + data, e.dataTransfer.getData('text'));\n    this.element.innerHTML = e.dataTransfer.getData('text');\n    return false;\n  }\n\n  @HostListener('dragend', ['$event']) handleDragEnd(e) {\n    this.element.style.opacity = '1';\n    this.element.classList.remove('over');\n  }\n}\n",
            "selector": "[appDragAndDrop]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58
                },
                {
                    "name": "dragenter",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35
                },
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43
                }
            ],
            "propertiesClass": [
                {
                    "name": "dragEl$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "handleDragEnd",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragend', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragEnter",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragenter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragLeave",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragOver",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragStart",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragstart', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDrop",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-7526fcde6fa6f0895ad52774e9d425d31ed88385c98c78f3192ab75301fc6391ebc3468fd21fa4b85c92d894ea790e39943f49ed0a4e5bc886deeca40acbce68",
            "file": "src/app/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, TemplateRef, HostListener, OnInit, ElementRef, ComponentRef } from '@angular/core';\r\nimport {\r\n  OverlayRef,\r\n  Overlay,\r\n  OverlayPositionBuilder\r\n} from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { TooltipComponent } from './tooltip.component';\r\n\r\n@Directive({ selector: '[appTooltip]' })\r\nexport class TooltipDirective implements OnInit {\r\n  @Input('appTooltip') content: string | TemplateRef<any>;\r\n  private overlayRef: OverlayRef;\r\n\r\n  constructor(\r\n    private overlayPositionBuilder: OverlayPositionBuilder,\r\n    private elementRef: ElementRef,\r\n    private overlay: Overlay\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const positionStrategy = this.overlayPositionBuilder\r\n      .flexibleConnectedTo(this.elementRef)\r\n      .withPositions([\r\n        {\r\n          originX: 'center',\r\n          originY: 'bottom',\r\n          overlayX: 'center',\r\n          overlayY: 'top'\r\n        }\r\n      ]);\r\n\r\n    this.overlayRef = this.overlay.create({ positionStrategy });\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  show() {\r\n    const tooltipPortal = new ComponentPortal(TooltipComponent);\r\n\r\n    const tooltipRef: ComponentRef<TooltipComponent> = this.overlayRef.attach(\r\n      tooltipPortal\r\n    );\r\n\r\n    if (typeof(this.content) === 'string') {\r\n      tooltipRef.instance.text = this.content;\r\n    } else {\r\n      tooltipRef.instance.content = this.content;\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseout')\r\n  hide() {\r\n    this.overlayRef.detach();\r\n  }\r\n}",
            "selector": "[appTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string | TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37
                },
                {
                    "name": "mouseout",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52
                }
            ],
            "propertiesClass": [
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseout'"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayPositionBuilder",
                        "type": "OverlayPositionBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "overlayPositionBuilder",
                        "type": "OverlayPositionBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-86feb19b75ed68b4276f2ee5efe0cb645e4181ebe97d7666a46869952762ef1e55b7621b9df5bbb3acd8edda35f2bc37b2e31e381e55c2b6696b0fe180618f39",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "name",
                    "defaultValue": "'Angular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "defaultValue": "'AppMaterial'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HelperService } from './services/helper.service';\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'AppMaterial';\r\n  name = 'Angular';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<nav>\r\n  <a class=\"button\" routerLink=\"/home\">Home</a> |\r\n  <a class=\"button\" routerLink=\"/contacts\">Contacts</a> |\r\n  <a class=\"button\" routerLink=\"/cards\">Cards</a> |\r\n  <a class=\"button\" routerLink=\"/signature\">Signature</a> |\r\n  <a class=\"button\" routerLink=\"/grid\">Grid</a> |\r\n  <a class=\"button\" routerLink=\"/swap\">Swap</a> |\r\n  <a class=\"button\" routerLink=\"/switch-map\">SwitchMap</a> | \r\n  <a class=\"button\" routerLink=\"/form-valid\">Form Validations</a> |\r\n  <a class=\"button\" routerLink=\"/multiselect\">Multiselect</a> |\r\n  <a class=\"button\" routerLink=\"/drag-and-drop\">Drag&Drop</a> |\r\n  <a class=\"button\" routerLink=\"/drag-and-drop1\">Drag&Drop 1</a> |\r\n  <a class=\"button\" routerLink=\"/drag-drop-dual-list\">Drag&Drop Dual List</a>\r\n  <!-- <button mat-raised-button color=\"primary\" type=\"submit\">Submit</button> -->\r\n</nav>\r\n<!-- <app-product-list></app-product-list> -->\r\n<!-- <lib-milena-lib></lib-milena-lib> -->\r\n\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CardsComponent",
            "id": "component-CardsComponent-15a50b913094f989a61d5832f0e977ac72e28c1851cf03ff3af590152334a1f1f2da3aa1c2d01afc4d9e2c78cb5dc07d6818e3c6c8f205e3b666896a5317573c",
            "file": "src/app/cards/cards.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cards",
            "styleUrls": [
                "./cards.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cards.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardsList",
                    "defaultValue": "[\r\n    {\r\n      text: 'בדיקת מכשיר',\r\n      price: '99',\r\n      priceNotVat: '84.62'\r\n    },\r\n    {\r\n      text: 'נזק לקוח - מסך',\r\n      price: '159.12',\r\n      priceNotVat: '136'\r\n    },\r\n    {\r\n      text: 'נזק לקוח - אחר',\r\n      price: '54.99',\r\n      priceNotVat: '47'\r\n    },\r\n    {\r\n      text: 'מימוש אובדן/גניבה',\r\n      price: '0',\r\n      priceNotVat: '0'\r\n    },\r\n    {\r\n      text: 'מימוש נזק בלתי הפיך',\r\n      price: '718.87',\r\n      priceNotVat: '614.42'\r\n    },\r\n    {\r\n      text: 'שליחות (עלות לכיוון)',\r\n      price: '100',\r\n      priceNotVat: '85.47'\r\n    },\r\n    {\r\n      text: 'מחיר סוללה ללא אחריות',\r\n      price: '48.58',\r\n      priceNotVat: '41.52'\r\n    },\r\n    {\r\n      text: 'חידוש מעטפת מכשיר',\r\n      price: '128.99',\r\n      priceNotVat: '110.25'\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "filteredOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "flipped",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "myControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "options",
                    "defaultValue": "['One', 'Two', 'Three']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methodsClass": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { Observable } from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-cards',\r\n  templateUrl: './cards.component.html',\r\n  styleUrls: ['./cards.component.scss']\r\n})\r\nexport class CardsComponent implements OnInit {\r\n  checked: boolean = false;\r\n  flipped: boolean = false;\r\n  cardsList = [\r\n    {\r\n      text: 'בדיקת מכשיר',\r\n      price: '99',\r\n      priceNotVat: '84.62'\r\n    },\r\n    {\r\n      text: 'נזק לקוח - מסך',\r\n      price: '159.12',\r\n      priceNotVat: '136'\r\n    },\r\n    {\r\n      text: 'נזק לקוח - אחר',\r\n      price: '54.99',\r\n      priceNotVat: '47'\r\n    },\r\n    {\r\n      text: 'מימוש אובדן/גניבה',\r\n      price: '0',\r\n      priceNotVat: '0'\r\n    },\r\n    {\r\n      text: 'מימוש נזק בלתי הפיך',\r\n      price: '718.87',\r\n      priceNotVat: '614.42'\r\n    },\r\n    {\r\n      text: 'שליחות (עלות לכיוון)',\r\n      price: '100',\r\n      priceNotVat: '85.47'\r\n    },\r\n    {\r\n      text: 'מחיר סוללה ללא אחריות',\r\n      price: '48.58',\r\n      priceNotVat: '41.52'\r\n    },\r\n    {\r\n      text: 'חידוש מעטפת מכשיר',\r\n      price: '128.99',\r\n      priceNotVat: '110.25'\r\n    }\r\n  ];\r\n\r\n  myControl = new FormControl();\r\n  options: string[] = ['One', 'Two', 'Three'];\r\n  filteredOptions: Observable<string[]>;\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.filteredOptions = this.myControl.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => this._filter(value))\r\n      );\r\n  }\r\n\r\n  private _filter(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n\r\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-card {\r\n    max-width: 100px;\r\n}\r\n  \r\n.example-header-image {\r\n    background-image: url('https://material.angular.io/assets/img/examples/shiba1.jpg');\r\n    background-size: cover;\r\n}\r\n\r\n.cards {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    direction: rtl;\r\n    justify-content: center;\r\n}\r\n\r\nmat-card.card {\r\n    min-width: 170px;\r\n    // height: 100px;\r\n    border: 1px solid gray;\r\n    text-align: center;\r\n    margin: 10px;\r\n    border-radius: 0;\r\n}\r\n\r\n.price {\r\n    font-size: 22px;\r\n    color: red;\r\n    font-weight: bold;\r\n    line-height: 32px;\r\n}\r\n\r\n.text {\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    line-height: 24px;\r\n}\r\n\r\n.content { \r\n    padding: 16px; \r\n}\r\n\r\n.content > mat-card { \r\n    width: 200px; \r\n}\r\n\r\n//////////////////\r\n.card-container {\r\n    width: 300px;\r\n    height: 270px;\r\n    position: relative;\r\n    -webkit-perspective: 500px;\r\n    perspective: 500px;\r\n}\r\n\r\n.flippable-card {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    transform-style: preserve-3d;\r\n    transition: transform 1s;\r\n}\r\n\r\n.flippable-card mat-card {\r\n    margin: 0;\r\n    display: block;\r\n    position: absolute;\r\n    width: 252px;\r\n    height: 222px;\r\n    backface-visibility: hidden;\r\n}\r\n\r\n.flippable-card .back {\r\n    background: #f0f0f0;\r\n    transform: rotateY( 180deg );\r\n}\r\n\r\n.flippable-card.flipped {\r\n    transform: rotateY( 180deg );\r\n}\r\n\r\n.example-form {\r\n    min-width: 150px;\r\n    max-width: 500px;\r\n    width: 100%;\r\n  }\r\n  \r\n  .example-full-width {\r\n    width: 100%;\r\n  }\r\n\r\n",
                    "styleUrl": "./cards.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 61
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <section class=\"example-section\">\r\n  <mat-checkbox class=\"example-margin\" color=\"primary\" [(ngModel)]=\"checked\">Checked</mat-checkbox>\r\n</section>\r\n{{checked}} -->\r\n<!-- <mat-card class=\"example-card\">\r\n    <mat-card-header>\r\n      <div mat-card-avatar class=\"example-header-image\"></div>\r\n      <mat-card-title>Shiba Inu</mat-card-title>\r\n      <mat-card-subtitle>Dog Breed</mat-card-subtitle>\r\n    </mat-card-header>\r\n    <img mat-card-image src=\"https://material.angular.io/assets/img/examples/shiba2.jpg\" alt=\"Photo of a Shiba Inu\">\r\n    <mat-card-content>\r\n      <p>\r\n        The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\r\n        A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\r\n        bred for hunting.\r\n      </p>\r\n    </mat-card-content>\r\n    <mat-card-actions>\r\n      <button mat-button>LIKE</button>\r\n      <button mat-button>SHARE</button>\r\n    </mat-card-actions>\r\n  </mat-card> -->\r\n<!-- <div class=\"cards\">\r\n  <div *ngFor=\"let card of cardsList\">\r\n    <mat-card class=\"card\">\r\n      <div class=\"price\" [innerHTML]=\"checked ? card.price : card.priceNotVat\">{{card.price}} &#8362;</div>\r\n      <div class=\"text\">{{card.text}}</div>\r\n    </mat-card>\r\n  </div>\r\n</div> -->\r\n\r\n\r\n\r\n<div class=\"content\" fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\r\n  <div fxFlex=\"25%\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\" *ngFor=\"let num of [1,2,3,4,5,6,7]\">\r\n    <mat-card class=\"mat-elevation-z4\" >\r\n      <mat-card-header>\r\n        <mat-card-title>Mountains {{num}}</mat-card-title>\r\n      </mat-card-header>\r\n      <img mat-card-image src=\"./../assets/images/mountains.jpg\">\r\n      <mat-card-content>\r\n        <p>\r\n          The Himalayas is a mountain range in Asia.\r\n        </p>\r\n      </mat-card-content>\r\n      <mat-card-actions>\r\n        <button mat-button>LIKE</button>\r\n        <button mat-button>SHARE</button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n\r\n\r\n<div class='card-container'>\r\n  <div class='flippable-card' [ngClass]=\"{'flipped':flipped}\" (click)='flipped = !flipped'>\r\n    <mat-card class=''>\r\n      <mat-card-title>Booya</mat-card-title>\r\n    </mat-card>\r\n    <mat-card class='back'>\r\n        <mat-card-title>to ya</mat-card-title>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <input type=\"text\"\r\n           placeholder=\"Pick one\"\r\n           aria-label=\"Number\"\r\n           matInput\r\n           [formControl]=\"myControl\"\r\n           [matAutocomplete]=\"auto\">\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\r\n        {{option}}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  </mat-form-field>\r\n</form>\r\n\r\n"
        },
        {
            "name": "ContactsComponent",
            "id": "component-ContactsComponent-8b5ebaa86fd5a37e3575cfb0bea6bba2b08bc483e436157279e2543afb8eb3a373abf27d81e3bfa7f785e08a9304153cdd1be3df02b523c1d72081ba69791eb5",
            "file": "src/app/contacts/contacts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contacts",
            "styleUrls": [
                "./contacts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./contacts.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addressForm",
                    "defaultValue": "this.fb.group({\r\n    company: null,\r\n    firstName: [null, Validators.required],\r\n    lastName: [null, Validators.required],\r\n    address: [null, Validators.required],\r\n    address2: null,\r\n    city: [null, Validators.required],\r\n    state: [null, Validators.required],\r\n    postalCode: [null, Validators.compose([\r\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\r\n    ],\r\n    shipping: ['free', Validators.required]\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "hasUnitNumber",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "states",
                    "defaultValue": "[\r\n    {name: 'Alabama', abbreviation: 'AL'},\r\n    {name: 'Alaska', abbreviation: 'AK'},\r\n    {name: 'American Samoa', abbreviation: 'AS'},\r\n    {name: 'Arizona', abbreviation: 'AZ'},\r\n    {name: 'Arkansas', abbreviation: 'AR'},\r\n    {name: 'California', abbreviation: 'CA'},\r\n    {name: 'Colorado', abbreviation: 'CO'},\r\n    {name: 'Connecticut', abbreviation: 'CT'},\r\n    {name: 'Delaware', abbreviation: 'DE'},\r\n    {name: 'District Of Columbia', abbreviation: 'DC'},\r\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\r\n    {name: 'Florida', abbreviation: 'FL'},\r\n    {name: 'Georgia', abbreviation: 'GA'},\r\n    {name: 'Guam', abbreviation: 'GU'},\r\n    {name: 'Hawaii', abbreviation: 'HI'},\r\n    {name: 'Idaho', abbreviation: 'ID'},\r\n    {name: 'Illinois', abbreviation: 'IL'},\r\n    {name: 'Indiana', abbreviation: 'IN'},\r\n    {name: 'Iowa', abbreviation: 'IA'},\r\n    {name: 'Kansas', abbreviation: 'KS'},\r\n    {name: 'Kentucky', abbreviation: 'KY'},\r\n    {name: 'Louisiana', abbreviation: 'LA'},\r\n    {name: 'Maine', abbreviation: 'ME'},\r\n    {name: 'Marshall Islands', abbreviation: 'MH'},\r\n    {name: 'Maryland', abbreviation: 'MD'},\r\n    {name: 'Massachusetts', abbreviation: 'MA'},\r\n    {name: 'Michigan', abbreviation: 'MI'},\r\n    {name: 'Minnesota', abbreviation: 'MN'},\r\n    {name: 'Mississippi', abbreviation: 'MS'},\r\n    {name: 'Missouri', abbreviation: 'MO'},\r\n    {name: 'Montana', abbreviation: 'MT'},\r\n    {name: 'Nebraska', abbreviation: 'NE'},\r\n    {name: 'Nevada', abbreviation: 'NV'},\r\n    {name: 'New Hampshire', abbreviation: 'NH'},\r\n    {name: 'New Jersey', abbreviation: 'NJ'},\r\n    {name: 'New Mexico', abbreviation: 'NM'},\r\n    {name: 'New York', abbreviation: 'NY'},\r\n    {name: 'North Carolina', abbreviation: 'NC'},\r\n    {name: 'North Dakota', abbreviation: 'ND'},\r\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\r\n    {name: 'Ohio', abbreviation: 'OH'},\r\n    {name: 'Oklahoma', abbreviation: 'OK'},\r\n    {name: 'Oregon', abbreviation: 'OR'},\r\n    {name: 'Palau', abbreviation: 'PW'},\r\n    {name: 'Pennsylvania', abbreviation: 'PA'},\r\n    {name: 'Puerto Rico', abbreviation: 'PR'},\r\n    {name: 'Rhode Island', abbreviation: 'RI'},\r\n    {name: 'South Carolina', abbreviation: 'SC'},\r\n    {name: 'South Dakota', abbreviation: 'SD'},\r\n    {name: 'Tennessee', abbreviation: 'TN'},\r\n    {name: 'Texas', abbreviation: 'TX'},\r\n    {name: 'Utah', abbreviation: 'UT'},\r\n    {name: 'Vermont', abbreviation: 'VT'},\r\n    {name: 'Virgin Islands', abbreviation: 'VI'},\r\n    {name: 'Virginia', abbreviation: 'VA'},\r\n    {name: 'Washington', abbreviation: 'WA'},\r\n    {name: 'West Virginia', abbreviation: 'WV'},\r\n    {name: 'Wisconsin', abbreviation: 'WI'},\r\n    {name: 'Wyoming', abbreviation: 'WY'}\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-contacts',\r\n  templateUrl: './contacts.component.html',\r\n  styleUrls: ['./contacts.component.scss']\r\n})\r\nexport class ContactsComponent {\r\n  addressForm = this.fb.group({\r\n    company: null,\r\n    firstName: [null, Validators.required],\r\n    lastName: [null, Validators.required],\r\n    address: [null, Validators.required],\r\n    address2: null,\r\n    city: [null, Validators.required],\r\n    state: [null, Validators.required],\r\n    postalCode: [null, Validators.compose([\r\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\r\n    ],\r\n    shipping: ['free', Validators.required]\r\n  });\r\n\r\n  hasUnitNumber = false;\r\n\r\n  states = [\r\n    {name: 'Alabama', abbreviation: 'AL'},\r\n    {name: 'Alaska', abbreviation: 'AK'},\r\n    {name: 'American Samoa', abbreviation: 'AS'},\r\n    {name: 'Arizona', abbreviation: 'AZ'},\r\n    {name: 'Arkansas', abbreviation: 'AR'},\r\n    {name: 'California', abbreviation: 'CA'},\r\n    {name: 'Colorado', abbreviation: 'CO'},\r\n    {name: 'Connecticut', abbreviation: 'CT'},\r\n    {name: 'Delaware', abbreviation: 'DE'},\r\n    {name: 'District Of Columbia', abbreviation: 'DC'},\r\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\r\n    {name: 'Florida', abbreviation: 'FL'},\r\n    {name: 'Georgia', abbreviation: 'GA'},\r\n    {name: 'Guam', abbreviation: 'GU'},\r\n    {name: 'Hawaii', abbreviation: 'HI'},\r\n    {name: 'Idaho', abbreviation: 'ID'},\r\n    {name: 'Illinois', abbreviation: 'IL'},\r\n    {name: 'Indiana', abbreviation: 'IN'},\r\n    {name: 'Iowa', abbreviation: 'IA'},\r\n    {name: 'Kansas', abbreviation: 'KS'},\r\n    {name: 'Kentucky', abbreviation: 'KY'},\r\n    {name: 'Louisiana', abbreviation: 'LA'},\r\n    {name: 'Maine', abbreviation: 'ME'},\r\n    {name: 'Marshall Islands', abbreviation: 'MH'},\r\n    {name: 'Maryland', abbreviation: 'MD'},\r\n    {name: 'Massachusetts', abbreviation: 'MA'},\r\n    {name: 'Michigan', abbreviation: 'MI'},\r\n    {name: 'Minnesota', abbreviation: 'MN'},\r\n    {name: 'Mississippi', abbreviation: 'MS'},\r\n    {name: 'Missouri', abbreviation: 'MO'},\r\n    {name: 'Montana', abbreviation: 'MT'},\r\n    {name: 'Nebraska', abbreviation: 'NE'},\r\n    {name: 'Nevada', abbreviation: 'NV'},\r\n    {name: 'New Hampshire', abbreviation: 'NH'},\r\n    {name: 'New Jersey', abbreviation: 'NJ'},\r\n    {name: 'New Mexico', abbreviation: 'NM'},\r\n    {name: 'New York', abbreviation: 'NY'},\r\n    {name: 'North Carolina', abbreviation: 'NC'},\r\n    {name: 'North Dakota', abbreviation: 'ND'},\r\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\r\n    {name: 'Ohio', abbreviation: 'OH'},\r\n    {name: 'Oklahoma', abbreviation: 'OK'},\r\n    {name: 'Oregon', abbreviation: 'OR'},\r\n    {name: 'Palau', abbreviation: 'PW'},\r\n    {name: 'Pennsylvania', abbreviation: 'PA'},\r\n    {name: 'Puerto Rico', abbreviation: 'PR'},\r\n    {name: 'Rhode Island', abbreviation: 'RI'},\r\n    {name: 'South Carolina', abbreviation: 'SC'},\r\n    {name: 'South Dakota', abbreviation: 'SD'},\r\n    {name: 'Tennessee', abbreviation: 'TN'},\r\n    {name: 'Texas', abbreviation: 'TX'},\r\n    {name: 'Utah', abbreviation: 'UT'},\r\n    {name: 'Vermont', abbreviation: 'VT'},\r\n    {name: 'Virgin Islands', abbreviation: 'VI'},\r\n    {name: 'Virginia', abbreviation: 'VA'},\r\n    {name: 'Washington', abbreviation: 'WA'},\r\n    {name: 'West Virginia', abbreviation: 'WV'},\r\n    {name: 'Wisconsin', abbreviation: 'WI'},\r\n    {name: 'Wyoming', abbreviation: 'WY'}\r\n  ];\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  onSubmit() {\r\n    alert('Thanks!');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".full-width {\n  width: 100%;\n}\n\n.shipping-card {\n  min-width: 120px;\n  margin: 20px auto;\n}\n\n.mat-radio-button {\n  display: block;\n  margin: 5px 0;\n}\n\n.row {\n  display: flex;\n  flex-direction: row;\n}\n\n.col {\n  flex: 1;\n  margin-right: 20px;\n}\n\n.col:last-child {\n  margin-right: 0;\n}\n",
                    "styleUrl": "./contacts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 88,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form [formGroup]=\"addressForm\" novalidate (ngSubmit)=\"onSubmit()\">\r\n\r\n  \r\n<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Et consectetur pariatur debitis error nobis \r\n  <span class=\"tooltip\" appTooltip=\"Here's a tooltip for you\">ex vero recusandae</span> reiciendis! Magni et magnam cumque praesentium? Eum consequatur ut totam sequi asperiores. \r\n  <span class=\"tooltip\" [appTooltip]=\"myTooltipContent\">Laboriosam?</span></p>\r\n\r\n<ng-template #myTooltipContent>\r\n  <h1>Something</h1>\r\n  <ul>\r\n    <li>Blah</li>\r\n    <li>Blah</li>\r\n    <li>Blah</li>\r\n  </ul>\r\n  <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Delectus similique commodi, tempora explicabo molestiae minima nesciunt est repellat recusandae, natus nulla eos sapiente et hic sequi exercitationem quia at? Accusamus.</p>\r\n</ng-template>\r\n\r\n\r\n  <mat-card class=\"shipping-card\">\r\n    <mat-card-header>\r\n      <mat-card-title>Shipping Information</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <mat-form-field class=\"full-width\">\r\n            <input matInput placeholder=\"Company\" formControlName=\"company\">\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <mat-form-field class=\"full-width\">\r\n            <input matInput placeholder=\"First name\" formControlName=\"firstName\">\r\n            <mat-error *ngIf=\"addressForm.controls['firstName'].hasError('required')\">\r\n              First name is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"col\">\r\n          <mat-form-field class=\"full-width\">\r\n            <input matInput placeholder=\"Last name\" formControlName=\"lastName\">\r\n            <mat-error *ngIf=\"addressForm.controls['lastName'].hasError('required')\">\r\n              Last name is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <mat-form-field class=\"full-width\">\r\n            <textarea matInput placeholder=\"Address\" formControlName=\"address\"></textarea>\r\n            <mat-error *ngIf=\"addressForm.controls['address'].hasError('required')\">\r\n              Address is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\" *ngIf=\"!hasUnitNumber\">\r\n        <div class=\"col\">\r\n          <button mat-button type=\"button\" (click)=\"hasUnitNumber = !hasUnitNumber\">\r\n            + Add C/O, Apt, Suite, Unit\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\" *ngIf=\"hasUnitNumber\">\r\n        <div class=\"col\">\r\n          <mat-form-field class=\"full-width\">\r\n            <textarea matInput placeholder=\"Address 2\" formControlName=\"address2\"></textarea>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <mat-form-field class=\"full-width\">\r\n            <input matInput placeholder=\"City\" formControlName=\"city\">\r\n            <mat-error *ngIf=\"addressForm.controls['city'].hasError('required')\">\r\n              City is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"col\">\r\n          <mat-form-field class=\"full-width\">\r\n            <mat-select placeholder=\"State\" formControlName=\"state\">\r\n              <mat-option *ngFor=\"let state of states\" [value]=\"state.abbreviation\">\r\n                {{ state.name }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"addressForm.controls['state'].hasError('required')\">\r\n              State is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <mat-form-field class=\"full-width\">\r\n            <input matInput #postalCode maxlength=\"5\" placeholder=\"Postal Code\" type=\"number\" formControlName=\"postalCode\">\r\n            <mat-hint align=\"end\">{{postalCode.value.length}} / 5</mat-hint>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <mat-radio-group formControlName=\"shipping\">\r\n            <mat-radio-button value=\"free\">Free Shipping</mat-radio-button>\r\n            <mat-radio-button value=\"priority\">Priority Shipping</mat-radio-button>\r\n            <mat-radio-button value=\"nextday\">Next Day Shipping</mat-radio-button>\r\n          </mat-radio-group>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions>\r\n      <button mat-raised-button color=\"primary\" type=\"submit\">Submit</button>\r\n      <button mat-raised-button class=\"my-dark-theme\" type=\"reset\">Reset</button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</form>\r\n"
        },
        {
            "name": "CustomDataGridComponent",
            "id": "component-CustomDataGridComponent-05a8dbeacb8f6cf87c42496a8b22273c9778b6a3bf666cef866a006970173456ea5d09390e8ae64375489d40cddc3f6fbae3abd5fa0db9f57d7c7615808643be",
            "file": "src/app/grid/custom-data-grid/custom-data-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-custom-data-grid",
            "styleUrls": [
                "./custom-data-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-data-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataGrid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "ICustomGridModel",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<any>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "displayedColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "expandedElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICustomGridModel | null",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "GridColumnTypeEnum",
                    "defaultValue": "GridColumnTypeEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilter",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openLink",
                    "args": [
                        {
                            "name": "row",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport { IColumn } from '../i-column';\r\nimport { ICustomGridModel } from '../i-custom-grid-model';\r\nimport { GridColumnTypeEnum } from '../enums';\r\nimport { HelperService } from 'src/app/services/helper.service';\r\n\r\n@Component({\r\n  selector: 'app-custom-data-grid',\r\n  templateUrl: './custom-data-grid.component.html',\r\n  styleUrls: ['./custom-data-grid.component.scss'],\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({height: '0px', minHeight: '0'})),\r\n      state('expanded', style({height: '*'})),\r\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ],\r\n})\r\nexport class CustomDataGridComponent implements OnInit {\r\n  GridColumnTypeEnum = GridColumnTypeEnum;\r\n  \r\n  @Input() dataGrid: ICustomGridModel;\r\n\r\n  columns: IColumn[];\r\n  displayedColumns: Array<string>;\r\n  dataSource: MatTableDataSource<any>;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  expandedElement: ICustomGridModel | null;\r\n\r\n  constructor(private helper: HelperService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.dataSource = new MatTableDataSource(this.dataGrid.dataSource);\r\n    this.columns = this.dataGrid.columns;    \r\n\r\n    this.displayedColumns = this.dataGrid.columns.map(item => item.dataField)\r\n\r\n    // debugger;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  openLink(row, column) {\r\n    console.log(row[column.dataField]);\r\n    \r\n    this.helper.setGridEvent(row, column, \"qwerty\")\r\n  }\r\n\r\n  onClickButton() {\r\n    const ds = this.dataSource.sortData(this.dataSource.filteredData,this.dataSource.sort);\r\n    console.log(\"sortable data: \", ds);\r\n  }\r\n\r\n}\r\n\r\n// export interface PeriodicElement {\r\n//   position: number;\r\n//   name: string;\r\n//   weight: number;\r\n//   symbol: string;\r\n// }\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-container {\r\n    max-width: 100%;\r\n    overflow: auto;\r\n    margin: 20px;\r\n}\r\n  \r\ntable {\r\n    width: 100%;\r\n}\r\n  \r\ntd.mat-column-star {\r\n    width: 20px;\r\n    padding-right: 8px;\r\n}\r\n  \r\nth.mat-column-position, td.mat-column-position {\r\n    padding-left: 8px;\r\n}\r\n  \r\n.mat-table-sticky:first-child {\r\n    border-right: 1px solid #e0e0e0;\r\n}\r\n  \r\n.mat-table-sticky:last-child {\r\n    border-left: 1px solid #e0e0e0;\r\n}\r\n\r\ntr.example-detail-row {\r\n    height: 0;\r\n}\r\n  \r\ntr.example-element-row:not(.example-expanded-row):hover {\r\n    background: whitesmoke;\r\n}\r\n  \r\ntr.example-element-row:not(.example-expanded-row):active {\r\n    background: #efefef;\r\n}\r\n  \r\n.example-element-position {\r\n    width: 100px;\r\n}\r\n\r\n.example-element-row td {\r\n    border-bottom-width: 0;\r\n}\r\n\r\n.example-element-detail {\r\n    overflow: hidden;\r\n    display: flex;\r\n}\r\n\r\n.example-element-diagram {\r\n    min-width: 80px;\r\n    border: 2px solid black;\r\n    padding: 8px;\r\n    font-weight: lighter;\r\n    margin: 8px 0;\r\n    height: 104px;\r\n}\r\n\r\n.example-element-symbol {\r\n    font-weight: bold;\r\n    font-size: 40px;\r\n    line-height: normal;\r\n}\r\n\r\n.example-element-description {\r\n    padding: 16px;\r\n}\r\n\r\n.example-element-description-attribution {\r\n    opacity: 0.5;\r\n}\r\n\r\n.mat-form-field {\r\n    font-size: 14px;\r\n    width: 100%;\r\n    margin: 20px;\r\n}\r\n\r\ntd, th {\r\n    width: 25%;\r\n}",
                    "styleUrl": "./custom-data-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "helper",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "helper",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"example-container mat-elevation-z8\">\r\n    <!-- <mat-form-field>\r\n        <mat-label>Filter</mat-label>\r\n        <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Ex. Mia\" #input>\r\n    </mat-form-field> -->\r\n    <button (click)=\"onClickButton()\">Click Me</button>\r\n    <table mat-table [dataSource]=\"dataSource\" matSort multiTemplateDataRows  class=\"mat-elevation-z8\">\r\n  \r\n        <ng-container matColumnDef=\"{{column.dataField}}\" *ngFor=\"let column of columns\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> {{column.headerText}} </th>\r\n            <td mat-cell *matCellDef=\"let row\">\r\n                <a href=\"javascript:void(0)\" (click)=\"openLink(row, column)\" *ngIf=\"column.dataType === GridColumnTypeEnum.link\">{{row[column.dataField]}}</a>\r\n                <span *ngIf=\"column.dataType === GridColumnTypeEnum.text\"> {{row[column.dataField]}}</span> \r\n            </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let element; columns: displayedColumns;\"\r\n                class=\"example-element-row\">\r\n        </tr>\r\n      \r\n    </table>\r\n  \r\n    <mat-paginator [pageSizeOptions]=\"[5]\"></mat-paginator>\r\n  </div>"
        },
        {
            "name": "DeliveryComponent",
            "id": "component-DeliveryComponent-326aea3d53cfde6a4e8114679c7bd2eeb1c34a3f8e15876f348f6995c44b54430924977c1d737ba76f02e26c25056e0854da60da5472779478e0760bf3246411",
            "file": "src/app/swap/delivery/delivery.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delivery",
            "styleUrls": [
                "./delivery.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delivery.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showBox",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickedOutside",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild,\r\n  TemplateRef,\r\n  AfterViewInit,\r\n  ViewContainerRef,\r\n  OnDestroy, \r\n  ElementRef} from '@angular/core';\r\nimport {Overlay, OverlayRef} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: 'app-delivery',\r\n  templateUrl: './delivery.component.html',\r\n  styleUrls: ['./delivery.component.scss']\r\n})\r\nexport class DeliveryComponent implements OnInit {\r\n  showBox = false;\r\n\r\n  constructor() { }\r\n  \r\n  ngOnInit(): void {\r\n  }\r\n\r\n  \r\n  openDialog(e: Event) {\r\n    e.stopPropagation();\r\n    this.showBox = !this.showBox;\r\n  }\r\n\r\n  onClickedOutside(e: Event) {\r\n    this.showBox = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    width: 100%;\r\n    height: 200px;\r\n    border: 1px solid gray;  \r\n    padding: 20px;\r\n    box-sizing: border-box;  \r\n}\r\n\r\n  .example-box {\r\n    width: 200px;\r\n    min-height: 200px;\r\n    height: auto;\r\n    border: solid 1px #ccc;\r\n    color: rgba(0, 0, 0, 0.87);\r\n    cursor: move;\r\n    display: block;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n    background: #fff;\r\n    border-radius: 4px;\r\n    margin-right: 25px;\r\n    position: relative;\r\n    z-index: 1;\r\n    box-sizing: border-box;\r\n    padding: 10px;\r\n    transition: box-shadow 200ms cubic-bezier(0, 0, 0.2, 1);\r\n    box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2),\r\n                0 2px 2px 0 rgba(0, 0, 0, 0.14),\r\n                0 1px 5px 0 rgba(0, 0, 0, 0.12);\r\n  }\r\n  \r\n  .example-box:active {\r\n    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),\r\n                0 8px 10px 1px rgba(0, 0, 0, 0.14),\r\n                0 3px 14px 2px rgba(0, 0, 0, 0.12);\r\n  }\r\n  \r\n  .example-boundary {\r\n    width: 400px;\r\n    height: 400px;\r\n    max-width: 100%;\r\n    border: dotted #ccc 2px;\r\n  }\r\n  ",
                    "styleUrl": "./delivery.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" #overlayContainer>\r\n\r\n    <!-- <button (click)=\"openDialog($event)\">Open a draggable dialog</button>\r\n\r\n    <div class=\"example-boundary\">\r\n        <div class=\"example-box\" cdkDragBoundary=\".example-boundary\" cdkDrag (clickOutside)=\"onClickedOutside($event)\" \r\n        *ngIf=\"showBox\">\r\n            Drag the dialog around!\r\n            <form class=\"example-form\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n                  <mat-label>Favorite food</mat-label>\r\n                  <input matInput placeholder=\"Ex. Pizza\" value=\"Sushi\">\r\n                </mat-form-field>\r\n              \r\n                <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n                  <mat-label>Leave a comment</mat-label>\r\n                  <textarea matInput placeholder=\"Ex. It makes me feel...\"></textarea>\r\n                </mat-form-field>\r\n\r\n                <button mat-raised-button color=\"primary\">Click</button>\r\n            </form>\r\n        </div>\r\n    </div> -->\r\n\r\n    <button (click)=\"openDialog($event)\">Open a draggable dialog</button>\r\n\r\n    <div class=\"example-boundary\">\r\n        <div class=\"example-box\" cdkDragBoundary=\".example-boundary\" cdkDrag appClickOutside (clickOutsideElement)=\"onClickedOutside($event)\" \r\n        *ngIf=\"showBox\">\r\n            <app-popup-form></app-popup-form>\r\n        </div>\r\n    </div>\r\n   \r\n</div>\r\n"
        },
        {
            "name": "DragAndDrop1Component",
            "id": "component-DragAndDrop1Component-a59de400500ffdc77dede4a94c7e0baa564833c5e995e73670fa8c5102b33fb436bbf4db975225bbae47799289f65879be13341f73f233f0f4f968289af2550f",
            "file": "src/app/drag-and-drop1/drag-and-drop1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-drag-and-drop1",
            "styleUrls": [
                "./drag-and-drop1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./drag-and-drop1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-drag-and-drop1',\n  templateUrl: './drag-and-drop1.component.html',\n  styleUrls: ['./drag-and-drop1.component.scss']\n})\nexport class DragAndDrop1Component implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit() {\n    const items = document.querySelectorAll('.item');\n    const columns = document.querySelectorAll('.column');\n\n    items.forEach(item => {\n      item.addEventListener('dragstart', dragStart)\n      item.addEventListener('dragend', dragEnd)\n    });\n\n    let dragItem = null;\n\n    function dragStart() {\n      console.log('drag started');\n      dragItem = this;\n      setTimeout(() => this.className = 'invisible', 0)\n    }\n    \n    function dragEnd() {\n        console.log('drag ended');\n        this.className = 'item'\n        dragItem = null;\n    }\n    \n    function dragDrop() {\n        console.log('drag dropped');\n        this.append(dragItem);\n    }\n\n    function dragOver(e) {\n      e.preventDefault();\n      console.log('drag over');\n    }\n\n    function dragEnter() {\n        console.log('drag entered');\n    }\n\n    function dragLeave() {\n        console.log('drag left');\n    }\n\n    columns.forEach(column => {\n      column.addEventListener('dragover', dragOver);\n      column.addEventListener('dragenter', dragEnter);\n      column.addEventListener('dragleave', dragLeave);\n      column.addEventListener('drop', dragDrop);\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\r\n    font-family: \"Trebuchet MS\", sans-serif;\r\n    display: flex;\r\n    gap: 30px;\r\n}\r\n.column{\r\n    flex-basis: 20%;\r\n    background: #ddd;\r\n    min-height: 90vh;\r\n    padding: 20px;\r\n    border-radius: 10px;\r\n}\r\n.column h1{\r\n    text-align: center;\r\n    font-size: 22px;\r\n}\r\n.item{\r\n    background: #fff;\r\n    margin: 20px;\r\n    padding: 20px;\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n}\r\n.invisible{\r\n    display: none;\r\n}",
                    "styleUrl": "./drag-and-drop1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n    <div class=\"column\">\n        <h1>All Tasks</h1>\n        <div class=\"item\" draggable=\"true\">Wash Clothes</div>\n        <div class=\"item\" draggable=\"true\">Meeting at 9AM</div>\n        <div class=\"item\" draggable=\"true\">Fix workshop</div>\n        <div class=\"item\" draggable=\"true\">Visit the zoo</div>\n    </div>\n    <div class=\"column\">\n        <h1>In progress</h1>\n    </div>\n    <div class=\"column\">\n        <h1>Paused</h1>\n    </div>\n    <div class=\"column\">\n        <h1>Under Review</h1>\n    </div>\n    <div class=\"column\">\n        <h1>Completed</h1>\n    </div>\n</div>"
        },
        {
            "name": "DragAndDrop2Component",
            "id": "component-DragAndDrop2Component-6f2541a5802a9f37f23ff4788af6bb05088d27edc25ba63c4d0ceb15ad30f83291a3704fbef0d6ea3ff628d9bd8c88c4b5664b5c98d7f1d78cfd4cf4fea91b42",
            "file": "src/app/drag-and-drop2/drag-and-drop2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-drag-and-drop2",
            "styleUrls": [
                "./drag-and-drop2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./drag-and-drop2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "availableFilterPlaceholder",
                    "defaultValue": "'Filter...'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "availables",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "Array<literal type>",
                    "decorators": []
                },
                {
                    "name": "availableText",
                    "defaultValue": "'Available items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedFilterPlaceholder",
                    "defaultValue": "'Filter...'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedText",
                    "defaultValue": "'Selected items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Array<literal type>",
                    "decorators": []
                },
                {
                    "name": "textField",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "valueField",
                    "defaultValue": "'id'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemsMoved",
                    "defaultValue": "new EventEmitter<IItemsMovedEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<IItemsMovedEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "availableItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IListBoxItem>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "fb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "listBoxForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "selectedItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IListBoxItem>",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<IListBoxItem[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<IListBoxItem[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { IListBoxItem, IItemsMovedEvent } from './dual-list-box';\nimport { moveItemInArray, CdkDragDrop, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-drag-and-drop2',\n  templateUrl: './drag-and-drop2.component.html',\n  styleUrls: ['./drag-and-drop2.component.scss']\n})\nexport class DragAndDrop2Component implements OnInit {\n\n  ngOnInit(): void {\n    \n  }\n\n  @Input() set availables(items: Array<{}>) {\n    this.availableItems = [...(items || []).map((item: {}, index: number) => ({\n      value: item[this.valueField].toString(),\n      text: item[this.textField],\n    }))];\n  }\n  // array of items to display in right box\n  @Input() set selects(items: Array<{}>) {\n    this.selectedItems = [...(items || []).map((item: {}, index: number) => ({\n      value: item[this.valueField].toString(),\n      text: item[this.textField],\n    }))];\n  }\n  // field to use for value of option\n  @Input() valueField = 'id';\n  // field to use for displaying option text\n  @Input() textField = 'name';\n  // text displayed over the available items list box\n  @Input() availableText = 'Available items';\n  // text displayed over the selected items list box\n  @Input() selectedText = 'Selected items';\n  // set placeholder text in available items list box\n  @Input() availableFilterPlaceholder = 'Filter...';\n  // set placeholder text in selected items list box\n  @Input() selectedFilterPlaceholder = 'Filter...';\n\n  // event called when items are moved between boxes, returns state of both boxes and item moved\n  @Output() itemsMoved: EventEmitter<IItemsMovedEvent> = new EventEmitter<IItemsMovedEvent>();\n\n  availableItems: Array<IListBoxItem> = [];\n  selectedItems: Array<IListBoxItem> = [];\n  listBoxForm: FormGroup;\n\n  constructor(public fb: FormBuilder) {\n\n    this.listBoxForm = this.fb.group({\n      availableSearchInput: [''],\n      selectedSearchInput: [''],\n    });\n  }\n\n  drop(event: CdkDragDrop<IListBoxItem[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n    }\n    // clear marked available items and emit event\n    this.itemsMoved.emit({\n      available: this.availableItems,\n      selected: this.selectedItems,\n      movedItems: event.container.data.filter((v, i) => i === event.currentIndex),\n      from: 'available',\n      to: 'selected',\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import url('https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css');\r\n\r\n.drag-drop-container {\r\n  width: 90%;\r\n  margin: auto;\r\n  vertical-align: top;\r\n}\r\n\r\n.drag-drop-list {\r\n  border: solid 1px;\r\n  min-height: 60px;\r\n  overflow: hidden;\r\n  display: block;\r\n  margin-top: 10px;\r\n  background: rgba(0, 0, 0, 0.3);\r\n  color: #fff;\r\n  border-radius: 10px;\r\n}\r\n\r\n.cdk-drag-preview {\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),\r\n              0 8px 10px 1px rgba(0, 0, 0, 0.14),\r\n              0 3px 14px 2px rgba(0, 0, 0, 0.12),\r\n}\r\n\r\n.cdk-drag-placeholder {\r\n  opacity: 0;\r\n}\r\n\r\n.cdk-drag-animating {\r\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n}\r\n\r\n.drag-drop-box:last-child {\r\n  border: none;\r\n}\r\n\r\n.drag-drop-list.cdk-drop-list-dragging .drag-drop-box:not(.cdk-drag-placeholder) {\r\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n}\r\n\r\n.drag-drop-box {\r\n  padding: 10px;\r\n  margin: 10px;\r\n  font-size: 14px; \r\n  background: rgb(30, 81, 97);\r\n  border-radius: 10px;\r\n  color: #fff;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  box-sizing: border-box;\r\n  cursor: move;\r\n  box-shadow: 0 8px 6px -6px #000;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .drag-drop-container {\r\n    margin: 0;\r\n  }\r\n  .dualListLeft, .dualListRight {\r\n    display: flex;\r\n  }\r\n\r\n  .listboxform-wrap {\r\n    padding-top: 3em;\r\n    padding-bottom: 3em;\r\n  }\r\n}\r\n\r\n@media (min-width: 480px) {\r\n\r\n}\r\n \r\n@media (max-width: 768px) {\r\n  .listbox-title {\r\n    font-size: 1.3rem;\r\n  }\r\n}",
                    "styleUrl": "./drag-and-drop2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "availables": {
                    "name": "availables",
                    "setSignature": {
                        "name": "availables",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "items",
                                "type": "Array<literal type>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "items",
                                "type": "Array<literal type>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "selects": {
                    "name": "selects",
                    "setSignature": {
                        "name": "selects",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "items",
                                "type": "Array<literal type>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "items",
                                "type": "Array<literal type>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"row listboxform-wrap d-flex m-0 p-3\" [formGroup]=\"listBoxForm\">\n\n    <div class=\"col-md-6 col-lg-6 col-sm-12 dualListLeft\">\n      <div class=\"primary-container drag-drop-container\">\n        <h4 class=\"text-center vertical-spacing-5 listbox-title\">{{availableText}}</h4>\n        <input type=\"text\"  \n                class=\"form-control vertical-spacing-5\" \n                placeholder=\"{{availableFilterPlaceholder}}\"     \n                formControlName=\"availableSearchInput\" \n                #availableSearchInput />\n        <div cdkDropList #availables=\"cdkDropList\" \n             [cdkDropListData] =\"availableItems\" \n             [cdkDropListConnectedTo] =\"[selects]\"\n             (cdkDropListDropped)=\"drop($event)\" \n             class=\"drag-drop-list\">\n            <div nbButton outline status='primary' \n                 class=\"drag-drop-box\" \n                 *ngFor=\"let item of availableItems | arrayFilter:['text', availableSearchInput.value]\" cdkDrag>\n                  {{item.text}}\n            </div>\n        </div>\n      </div>\n    </div>\n  \n    <div class=\"col-md-6 col-lg-6 col-sm-12 dualListRight\">\n      <div class=\"primary-container drag-drop-container\">\n        <h4 class=\"text-center vertical-spacing-5 listbox-title\">{{selectedText}}</h4>\n        <input type=\"text\" \n              class=\"form-control vertical-spacing-5\" \n              placeholder=\"{{selectedFilterPlaceholder}}\"\n              formControlName=\"selectedSearchInput\" \n              #selectedSearchInput />\n        <div cdkDropList #selects=\"cdkDropList\" \n            [cdkDropListData] =\"selectedItems\" \n            [cdkDropListConnectedTo]=\"[availables]\"\n            (cdkDropListDropped)=\"drop($event)\" \n            class=\"drag-drop-list\">\n            <div nbButton outline status='primary' \n                class=\"drag-drop-box\"    \n                *ngFor=\"let item of selectedItems | arrayFilter:['text', selectedSearchInput.value]\" \n                cdkDrag>{{item.text}}\n            </div>\n        </div>\n      </div>\n    </div>\n  </div>"
        },
        {
            "name": "DragAndDropComponent",
            "id": "component-DragAndDropComponent-616ebf1a3340a9995498a0326b5a09ea29ccc57e94afd1537c2a34921dcc9b3aa7f1f4081d7ef43a102e9d8f69bdace5347bf4c2e989118f760843f6d6884221",
            "file": "src/app/drag-and-drop/drag-and-drop.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-drag-and-drop",
            "styleUrls": [
                "./drag-and-drop.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./drag-and-drop.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dragEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "HEROES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "levels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'dap'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleDragEnd",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragEnter",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragLeave",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragOver",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragStart",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDrop",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, QueryList, ViewChildren } from '@angular/core';\n\n@Component({\n  selector: 'app-drag-and-drop',\n  templateUrl: './drag-and-drop.component.html',\n  styleUrls: ['./drag-and-drop.component.scss']\n})\nexport class DragAndDropComponent implements OnInit {\n  HEROES: { id: number; name: string }[];\n\n  @ViewChildren('dap') levels: QueryList<ElementRef>;\n  \n  dragEl: any;\n\n  constructor() {}\n\n  ngOnInit() {\n    this.HEROES = [\n      { id: 1, name: 'Superman' },\n      { id: 2, name: 'Batman' },\n      { id: 5, name: 'BatGirl' },\n      { id: 3, name: 'Robin' },\n      { id: 4, name: 'Flash' },\n    ];\n    console.log(\"querySelectorAll: \", document.querySelectorAll('.box'));\n  }\n\n  ngAfterViewInit() {\n    if (this.levels['_results']) {\n      console.log(this.levels['_results'])\n      var items = this.levels['_results'].map((el) => el.nativeElement);\n      console.log(items)\n      var dragEl = null;\n\n      function handleDragStart(e) {\n        this.style.opacity = '0.4';\n\n        dragEl = this;\n        console.log(\"handleDragStart from c\",this);\n        console.log(this, this.innerHTML);\n\n        e.dataTransfer.effectAllowed = 'move';\n        e.dataTransfer.setData('text', this.innerHTML);\n      }\n\n      function handleDragOver(e) {\n        if (e.preventDefault) {\n          e.preventDefault();\n        }\n\n        e.dataTransfer.dropEffect = 'move';\n\n        return false;\n      }\n\n      function handleDragEnter(e) {\n        this.classList.add('over');\n      }\n\n      function handleDragLeave(e) {\n        this.classList.remove('over');\n      }\n\n      function handleDrop(e) {\n        if (e.stopPropagation) {\n          e.stopPropagation();\n        }\n\n        if (dragEl != this) {\n          dragEl.innerHTML = this.innerHTML;\n          this.innerHTML = e.dataTransfer.getData('text');\n        }\n\n        return false;\n      }\n\n      function handleDragEnd(e) {\n        this.style.opacity = '1';\n\n        items.forEach(function (item) {\n          item.classList.remove('over');\n        });\n      }\n\n      items.forEach(function (item) {\n        item.addEventListener('dragstart', handleDragStart);\n        item.addEventListener('dragenter', handleDragEnter);\n        item.addEventListener('dragover', handleDragOver);\n        item.addEventListener('dragleave', handleDragLeave);\n        item.addEventListener('drop', handleDrop);\n        item.addEventListener('dragend', handleDragEnd);\n      });\n    }\n  }\n\n  handleDragStart(e) {\n    console.log('e', e);\n    // e.style.opacity = '0.4';\n\n    // this.dragEl = e;\n    // console.log(this, e.innerHTML);\n\n    // e.dataTransfer.effectAllowed = 'move';\n    // e.dataTransfer.setData('text', e.innerHTML);\n  }\n\n  handleDragOver(e) {\n    if (e.preventDefault) {\n      e.preventDefault();\n    }\n\n    e.dataTransfer.dropEffect = 'move';\n\n    return false;\n  }\n\n  handleDragEnter(e) {\n    e.classList.add('over');\n  }\n\n  handleDragLeave(e) {\n    e.classList.remove('over');\n  }\n\n  handleDrop(e) {\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    }\n\n    if (this.dragEl != e) {\n      this.dragEl.innerHTML = e.innerHTML;\n      e.innerHTML = e.dataTransfer.getData('text');\n    }\n\n    return false;\n  }\n\n  handleDragEnd(e) {\n    e.style.opacity = '1';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".box {\r\n    border: 3px solid rgb(230, 197, 197);\r\n    background-color: rgb(110, 149, 175);\r\n    border-radius: 0.5em;\r\n    padding: 10px;\r\n    cursor: move;\r\n    color: white;\r\n  }\r\n  \r\n  .box.over {\r\n    border: 3px dotted rgb(245, 41, 41);\r\n  }\r\n  ",
                    "styleUrl": "./drag-and-drop.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"margin:50px; width:50%;\">\n    <div #dap *ngFor=\"let data of HEROES\" draggable=\"true\" class=\"box\">\n      {{ data.name }}\n    </div>\n    <div #dap draggable=\"true\" class=\"box\">B</div>\n    <div #dap draggable=\"true\" class=\"box\">C</div>\n</div>\n"
        },
        {
            "name": "DragDropDualListComponent",
            "id": "component-DragDropDualListComponent-18728ba9befa8887772954ac83389dd6256acf0eb6974fb1fd00897c45f16197650318126844a89978f502d8a8b6a811a102b4c1b541964ebf2075b0d90dc17b",
            "file": "src/app/drag-and-drop2/drag-drop-dual-list/drag-drop-dual-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-drag-drop-dual-list",
            "styleUrls": [
                "./drag-drop-dual-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./drag-drop-dual-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "currentSelectItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selectedItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onItemsMoved",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-drag-drop-dual-list',\n  templateUrl: './drag-drop-dual-list.component.html',\n  styleUrls: ['./drag-drop-dual-list.component.scss']\n})\nexport class DragDropDualListComponent implements OnInit {\n  availableItems: any[] = [];\n  selectedItems: any[] = [];\n  currentSelectItems: any[] = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.availableItems = [\n      { id: '1', name: 'Item 1'},\n      { id: '2', name: 'Item 2'},\n      { id: '3', name: 'Item 3'},\n      { id: '4', name: 'Item 4'},\n      { id: '5', name: 'Item 5'},\n      { id: '6', name: 'Item 6'},\n    ]\n  }\n\n  onItemsMoved(event): void {\n    this.currentSelectItems = event.selected;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./drag-drop-dual-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-drag-and-drop2 \n    [availables]=\"availableItems\" \n    [selects]=\"selectedItems\" \n    valueField=\"id\" \n    textField=\"name\" \n    (itemsMoved)=\"onItemsMoved($event)\"></app-drag-and-drop2>>"
        },
        {
            "name": "FormItemComponent",
            "id": "component-FormItemComponent-e2f39a2f117e4d1764b6e52367e62608be8066687c8235812d4a1dd879549e167fd99cde29f8c73cac3a9e3492d09ad9a357a1eeeb3dafe2413bed31e2588f22",
            "file": "src/app/reactive-forms-validation/form-item/form-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-item",
            "styleUrls": [
                "./form-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "product",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Product",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "productForm",
                    "defaultValue": "new FormGroup(\n    {\n      remarkFormControl: new FormControl('', [Validators.required]),\n      noteFormControl: new FormControl('', [Validators.required])\n    }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "noteFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remarkFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Error when invalid control is dirty, touched, or submitted.</p>\n",
            "rawdescription": "\nError when invalid control is dirty, touched, or submitted.",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, FormGroupDirective, NgForm, Validators } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { of } from 'rxjs';\nimport { Product } from 'src/app/classes/product';\nimport { HelperService } from 'src/app/services/helper.service';\n\n/** Error when invalid control is dirty, touched, or submitted. */\n// export class MyErrorStateMatcher implements ErrorStateMatcher {\n//   isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n//     const isSubmitted = form && form.submitted;\n//     return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n//   }\n// }\n\n@Component({\n  selector: 'app-form-item',\n  templateUrl: './form-item.component.html',\n  styleUrls: ['./form-item.component.scss']\n})\nexport class FormItemComponent implements OnInit {\n\n  @Input() product: Product;\n\n  // matcher = new MyErrorStateMatcher();\n  \n  productForm: FormGroup = new FormGroup(\n    {\n      remarkFormControl: new FormControl('', [Validators.required]),\n      noteFormControl: new FormControl('', [Validators.required])\n    }\n  );\n\n  constructor(private helper: HelperService, fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    // this.helper.isSubmitForm$.subscribe({\n    //     next: (v) => console.log(v),\n    //     error: (e) => console.error(e),\n    //     complete: () => console.info('complete') \n    // });\n    this.helper.isSubmitForm$.subscribe((event: boolean) => {\n       if(event) {\n         debugger;\n        this.productForm.markAllAsTouched();\n       }\n    });\n\n  }\n\n  remarkFormControl(): boolean {\n    return this.productForm.controls['remarkFormControl'].hasError('required');\n  }\n\n  noteFormControl(): boolean {\n    return this.productForm.controls['noteFormControl'].hasError('required');\n  }\n\n  isValid() {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\r\n    display: flex;\r\n}",
                    "styleUrl": "./form-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "helper",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "helper",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\" [formGroup]=\"productForm\">\n    {{product?.name}}\n\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Remark</mat-label>\n        <input type=\"email\" matInput formControlName=\"remarkFormControl\">\n        <mat-error *ngIf=\"remarkFormControl()\">\n          Remark is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Notes</mat-label>\n        <input type=\"email\" matInput formControlName=\"noteFormControl\">\n        <mat-error *ngIf=\"noteFormControl()\">\n          Note is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n</div>\n\n"
        },
        {
            "name": "GridComponent",
            "id": "component-GridComponent-8b2cf22cdf2641f8042e970b1fdecd4ca9ad75d3f96e740e4239a7abbc4a861ea6877b6e128af7e4d6612ae993bc09cad44b57c42d7f31dff633d8419ede51df",
            "file": "src/app/grid/grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-grid",
            "styleUrls": [
                "./grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataGrid",
                    "defaultValue": "{\r\n      dataSource: [\r\n        {position: 1, name: 'Hydrogen', weight: '1.0079', symbol: 'H'},\r\n        {position: 2, name: 'Helium', weight: '4.0026', symbol: 'He'},\r\n        {position: 3, name: 'Lithium', weight: '6.941', symbol: 'Li'},\r\n        {position: 4, name: 'Beryllium', weight: '9.0122', symbol: 'Be'},\r\n        {position: 5, name: 'Boron', weight: '10.811', symbol: 'B'},\r\n        {position: 6, name: 'Carbon', weight: '12.0107', symbol: 'C'},\r\n        {position: 7, name: 'Nitrogen', weight: '14.0067', symbol: 'N'},\r\n        {position: 8, name: 'Oxygen', weight: '15.9994', symbol: 'O'},\r\n        {position: 9, name: 'Fluorine', weight: '18.9984', symbol: 'F'},\r\n        {position: 10, name: 'Neon', weight: '20.1797', symbol: 'Ne'},\r\n      ],\r\n      columns: this.displayedColumns\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICustomGridModel",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\r\n    { headerText: 'Position', dataField: 'position', dataType: GridColumnTypeEnum.text, cssClass: '' },\r\n    { headerText: 'Name', dataField: 'name', dataType: GridColumnTypeEnum.text, cssClass: '' },\r\n    { headerText: 'Weight', dataField: 'weight', dataType: GridColumnTypeEnum.text, cssClass: '' },\r\n    { headerText: 'Symbol', dataField: 'symbol', dataType: GridColumnTypeEnum.link, cssClass: '' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DataSource } from '@angular/cdk/collections';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { IGridEvents } from '../interfaces/i-grid-events';\r\nimport { HelperService } from '../services/helper.service';\r\nimport { GridColumnTypeEnum } from './enums';\r\nimport { IColumn } from './i-column';\r\nimport { ICustomGridModel } from './i-custom-grid-model';\r\n\r\n@Component({\r\n  selector: 'app-grid',\r\n  templateUrl: './grid.component.html',\r\n  styleUrls: ['./grid.component.scss']\r\n})\r\n\r\n\r\nexport class GridComponent implements OnInit {\r\n  \r\n  // ELEMENT_DATA: PeriodicElement[] = [\r\n  //   {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  //   {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  //   {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  //   {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  //   {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  //   {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  //   {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  //   {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  //   {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  //   {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n  // ];\r\n\r\n  // displayedColumns: string[] = ['position', 'name', 'weight', 'symbol'];\r\n\r\n  \r\n  displayedColumns: IColumn[] = [\r\n    { headerText: 'Position', dataField: 'position', dataType: GridColumnTypeEnum.text, cssClass: '' },\r\n    { headerText: 'Name', dataField: 'name', dataType: GridColumnTypeEnum.text, cssClass: '' },\r\n    { headerText: 'Weight', dataField: 'weight', dataType: GridColumnTypeEnum.text, cssClass: '' },\r\n    { headerText: 'Symbol', dataField: 'symbol', dataType: GridColumnTypeEnum.link, cssClass: '' }\r\n  ]\r\n\r\n  dataGrid: ICustomGridModel = \r\n    {\r\n      dataSource: [\r\n        {position: 1, name: 'Hydrogen', weight: '1.0079', symbol: 'H'},\r\n        {position: 2, name: 'Helium', weight: '4.0026', symbol: 'He'},\r\n        {position: 3, name: 'Lithium', weight: '6.941', symbol: 'Li'},\r\n        {position: 4, name: 'Beryllium', weight: '9.0122', symbol: 'Be'},\r\n        {position: 5, name: 'Boron', weight: '10.811', symbol: 'B'},\r\n        {position: 6, name: 'Carbon', weight: '12.0107', symbol: 'C'},\r\n        {position: 7, name: 'Nitrogen', weight: '14.0067', symbol: 'N'},\r\n        {position: 8, name: 'Oxygen', weight: '15.9994', symbol: 'O'},\r\n        {position: 9, name: 'Fluorine', weight: '18.9984', symbol: 'F'},\r\n        {position: 10, name: 'Neon', weight: '20.1797', symbol: 'Ne'},\r\n      ],\r\n      columns: this.displayedColumns\r\n    };\r\n\r\n  \r\n  constructor(private helper: HelperService) {     \r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.helper.gridEvent$.subscribe((event: IGridEvents) => {\r\n      if(event && event.component === \"qwerty\"){\r\n        console.log(\"event: \", event);\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// export interface PeriodicElement {\r\n//   position: number;\r\n//   name: string;\r\n//   weight: number;\r\n//   symbol: string;\r\n// }\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-container {\r\n    max-width: 100%;\r\n    overflow: auto;\r\n    margin: 20px;\r\n}\r\n  \r\ntable {\r\n    width: 100%;\r\n}\r\n  \r\ntd.mat-column-star {\r\n    width: 20px;\r\n    padding-right: 8px;\r\n}\r\n  \r\nth.mat-column-position, td.mat-column-position {\r\n    padding-left: 8px;\r\n}\r\n  \r\n.mat-table-sticky:first-child {\r\n    border-right: 1px solid #e0e0e0;\r\n}\r\n  \r\n.mat-table-sticky:last-child {\r\n    border-left: 1px solid #e0e0e0;\r\n}\r\n\r\ntr.example-detail-row {\r\n    height: 0;\r\n}\r\n  \r\ntr.example-element-row:not(.example-expanded-row):hover {\r\n    background: whitesmoke;\r\n}\r\n  \r\ntr.example-element-row:not(.example-expanded-row):active {\r\n    background: #efefef;\r\n}\r\n  \r\n.example-element-position {\r\n    width: 100px;\r\n}\r\n\r\n.example-element-row td {\r\n    border-bottom-width: 0;\r\n}\r\n\r\n.example-element-detail {\r\n    overflow: hidden;\r\n    display: flex;\r\n}\r\n\r\n.example-element-diagram {\r\n    min-width: 80px;\r\n    border: 2px solid black;\r\n    padding: 8px;\r\n    font-weight: lighter;\r\n    margin: 8px 0;\r\n    height: 104px;\r\n}\r\n\r\n.example-element-symbol {\r\n    font-weight: bold;\r\n    font-size: 40px;\r\n    line-height: normal;\r\n}\r\n\r\n.example-element-description {\r\n    padding: 16px;\r\n}\r\n\r\n.example-element-description-attribution {\r\n    opacity: 0.5;\r\n}\r\n\r\n.mat-form-field {\r\n    font-size: 14px;\r\n    width: 100%;\r\n    margin: 20px;\r\n}\r\n\r\ntd, th {\r\n    width: 25%;\r\n}",
                    "styleUrl": "./grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "helper",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "helper",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n  <app-custom-data-grid [dataGrid]=\"dataGrid\"></app-custom-data-grid>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-591bcc3b27a9a81c36a1e6118e33e0d75643a0b8cfd020d422cb03456e13536b9e17d8e032aec8714bb64f4ea643be94f79580f017cfca11a7f0c2cad5e85ac2",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'AppMaterial'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  title = 'AppMaterial';\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".companyName{\r\n  font-size: 150%;\r\n}\r\n\r\n.mat-toolbar{\r\nheight: 7vh;\r\n}\r\n\r\ndiv {\r\n  overflow: inherit;\r\n}\r\n\r\n.mat-sidenav-container{\r\nbackground-color: lightskyblue;\r\nmin-height: 93vh !important;\r\n}\r\n\r\na{\r\n  text-decoration: none;\r\n  font-size: 110%;\r\n  white-space: normal;\r\n}\r\n\r\nbutton{\r\n  font-size: 110%;\r\n  min-width: min-content;\r\n}\r\n\r\n.example-icon {\r\n  padding: 0 14px;\r\n}\r\n\r\n.example-spacer {\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.mat-sidenav-content{\r\n    font-size: 200%;\r\n    text-align: center;\r\n}",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div> \r\n  <!-- <mat-toolbar color=\"primary\">\r\n    <div fxShow=\"true\" fxHide.gt-sm=\"true\">\r\n      <button mat-icon-button (click)=\"sidenav.toggle()\">\r\n        <mat-icon>menu</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <a mat-button class=\"companyName\" routerLink=\"/\">\r\n      <span>Site name</span>\r\n    </a>\r\n    <span class=\"example-spacer\"></span>\r\n    <div fxShow=\"true\" fxHide.lt-md=\"true\">\r\n      <a mat-button routerLink=\"/about-us\">About us</a>\r\n      <a mat-button routerLink=\"/prices\">Prices</a>\r\n      <a mat-button routerLink=\"/start-page\">Start page</a>\r\n      <a mat-button routerLink=\"/offer\">Offer</a>\r\n      <a mat-button routerLink=\"/contact\">Contact</a>\r\n    </div>\r\n\r\n  </mat-toolbar>\r\n  <mat-sidenav-container fxFlexFill class=\"example-container\">\r\n\r\n    <mat-sidenav color=\"primary\" #sidenav fxLayout=\"column\" mode=\"over\"  opened=\"false\" fxHide.gt-sm=\"true\">\r\n      <div fxLayout=\"column\">\r\n        <a mat-button routerLink=\"/about-us\">About us</a>\r\n        <a mat-button routerLink=\"/prices\">Prices</a>\r\n        <a mat-button routerLink=\"/start-page\">Start page</a>\r\n        <a mat-button routerLink=\"/offer\">Offer</a>\r\n        <a mat-button routerLink=\"/contact\">Contact</a>\r\n      </div>\r\n    </mat-sidenav>\r\n    <mat-sidenav-content fxFlexFill>\r\n      Awesome content\r\n    </mat-sidenav-content>\r\n  </mat-sidenav-container> -->\r\n\r\n  <app-grid></app-grid>\r\n</div>"
        },
        {
            "name": "MultiselectComponent",
            "id": "component-MultiselectComponent-2b1f1aad29fe79dafc33069eb8426ee3bbfc7b98e75cfe80764d7748c971b7b478dce5d4e6e85dfff03c115c8651cadf001e264bb096e17db012496a7980af14",
            "file": "src/app/multiselect/multiselect.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-multiselect",
            "styleUrls": [
                "./multiselect.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./multiselect.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "areaControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "areaGroups",
                    "defaultValue": "[\n    {\n      name: '',\n      disabled: false,\n      cities: [\n        {value: 'Bat Yam', viewValue: 'בת ים', checked: false},\n        {value: 'Arial', viewValue: 'אריאל', checked: false},\n        {value: 'Givatayim', viewValue: 'גבעתיים', checked: false}\n      ],\n      completed: false\n    },\n    {\n      name: 'צפון',\n      disabled: false,\n      cities: [\n        {value: 'Haifa', viewValue: 'חיפה', checked: false},\n        {value: 'Karmiel', viewValue: 'כרמיאל', checked: false},\n        {value: 'Nazaret', viewValue: 'נצרת', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'מרכז',\n      disabled: false,\n      cities: [\n        {value: 'Tel Aviv', viewValue: 'תל אביב', checked: false},\n        {value: 'Ramat Gan', viewValue: 'רמת גן', checked: false},\n        {value: 'Petah Tikva', viewValue: 'פתח תקווה', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'שפלה',\n      disabled: true,\n      cities: [\n        {value: 'Ashdod', viewValue: 'אשדוד', checked: false},\n        {value: 'Lod', viewValue: 'לוד', checked: false},\n        {value: 'Yavne', viewValue: 'יבנה', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'דרום',\n      disabled: false,\n      cities: [\n        {value: 'Beer Sheva', viewValue: 'באר שבע', checked: false},\n        {value: 'Eilat', viewValue: 'אילת', checked: false},\n      ],\n      completed: false\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AreaGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selectedValues",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "getSelections",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAll",
                    "args": [
                        {
                            "name": "completed",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "group",
                            "type": "AreaGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "completed",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "group",
                            "type": "AreaGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "sel",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "group",
                            "type": "AreaGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sel",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "group",
                            "type": "AreaGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "someComplete",
                    "args": [
                        {
                            "name": "group",
                            "type": "AreaGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "AreaGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-multiselect',\n  templateUrl: './multiselect.component.html',\n  styleUrls: ['./multiselect.component.scss']\n})\nexport class MultiselectComponent implements OnInit {\n  areaControl = new FormControl();\n  areaGroups: AreaGroup[] = [\n    {\n      name: '',\n      disabled: false,\n      cities: [\n        {value: 'Bat Yam', viewValue: 'בת ים', checked: false},\n        {value: 'Arial', viewValue: 'אריאל', checked: false},\n        {value: 'Givatayim', viewValue: 'גבעתיים', checked: false}\n      ],\n      completed: false\n    },\n    {\n      name: 'צפון',\n      disabled: false,\n      cities: [\n        {value: 'Haifa', viewValue: 'חיפה', checked: false},\n        {value: 'Karmiel', viewValue: 'כרמיאל', checked: false},\n        {value: 'Nazaret', viewValue: 'נצרת', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'מרכז',\n      disabled: false,\n      cities: [\n        {value: 'Tel Aviv', viewValue: 'תל אביב', checked: false},\n        {value: 'Ramat Gan', viewValue: 'רמת גן', checked: false},\n        {value: 'Petah Tikva', viewValue: 'פתח תקווה', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'שפלה',\n      disabled: true,\n      cities: [\n        {value: 'Ashdod', viewValue: 'אשדוד', checked: false},\n        {value: 'Lod', viewValue: 'לוד', checked: false},\n        {value: 'Yavne', viewValue: 'יבנה', checked: false},\n      ],\n      completed: false\n    },\n    {\n      name: 'דרום',\n      disabled: false,\n      cities: [\n        {value: 'Beer Sheva', viewValue: 'באר שבע', checked: false},\n        {value: 'Eilat', viewValue: 'אילת', checked: false},\n      ],\n      completed: false\n    },\n  ];\n  \n  selectedValues = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    \n  }\n\n  someComplete(group: AreaGroup): boolean {\n    if (group.cities == null) {\n      return false;\n    }\n\n    return group.cities.filter(t => t.checked).length > 0 && !group.completed;\n  }\n\n  setAll(completed: boolean, group: AreaGroup) {\n    group.completed = completed;\n    if (group.cities == null) {\n      return;\n    }\n    \n    group.cities.forEach(t => {\n      t.checked = completed;\n    });\n    \n    const selecteds = this.updateSelected();\n    this.selectedValues = selecteds.reduce(function(a, b){ return a.concat(b); }, []);\n\n    // console.log(\"selectedAllValues: \", this.selectedValues);\n    \n    this.areaControl.setValue(this.selectedValues);\n  }\n\n  setSelected(sel: boolean, group: AreaGroup, index: number) {\n    group.cities[index].checked = sel;\n\n    group.completed = sel ? (group.cities.filter(x => x.checked)?.length === group.cities.length ? true : false) : false;\n    \n    const selecteds = this.updateSelected();\n    this.selectedValues = selecteds.reduce(function(a, b){ return a.concat(b); }, []);\n\n    // console.log(\"selectedValues: \", this.selectedValues);\n  }\n\n  updateSelected(): any[] {\n    let temp=[];\n    let gr;\n    this.areaGroups.forEach(itemGroup => {\n      if(itemGroup.cities.filter(x => x.checked)?.length) {\n        gr = itemGroup.cities.filter(x => x.checked).map(y => y.value);   \n        temp.push(gr); \n      }\n    });\n\n    return temp;\n  }\n\n  getSelections() {\n    debugger;\n    console.log(\"areaGroups: \", this.areaGroups);\n  }\n\n}\n\ninterface City {\n  value: string;\n  viewValue: string;\n  checked: boolean;\n}\n\ninterface AreaGroup {\n  disabled?: boolean;\n  name: string;\n  cities: City[];\n  completed: boolean\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./multiselect.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 63
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h4>Select with option groups multiple selection</h4>\n<div class=\"right-to-left\">\n    <mat-form-field appearance=\"fill\">\n        <mat-label>אזורים</mat-label>\n        <mat-select [formControl]=\"areaControl\" multiple>\n            <!-- <mat-option>-- בחר אזור/'ם --</mat-option> -->\n            <mat-optgroup class=\"custom\" [class.no-group-options]=\"!group.name\" *ngFor=\"let group of areaGroups\" [label]=\"group.name\"\n                        [disabled]=\"group.disabled\">\n                \n                <mat-checkbox class=\"example-margin\" *ngIf=\"group.name\"\n                        [disabled]=\"group.disabled\"\n                        [checked]=\"group.completed\"\n                        [indeterminate]=\"someComplete(group)\"\n                        (change)=\"setAll($event.checked, group)\">\n                </mat-checkbox>\n                \n                <mat-option #matOption *ngFor=\"let city of group.cities; let i=index\" [value]=\"city.value\" (click)=\"setSelected(matOption.selected, group, i)\">\n                    {{city.viewValue}}\n                </mat-option>\n                \n            </mat-optgroup>\n        </mat-select>\n    </mat-form-field>\n</div>\n<br />\n\n\n<button (click)=\"getSelections()\">get selections</button>\n<br />\nSelecteds: {{areaControl.value}}\n\n\n\n"
        },
        {
            "name": "OverlayComponent",
            "id": "component-OverlayComponent-92155c0b08acae0c37fd092fe8502466d6a91a3f12d0909e1968813e9ba2ce9794a7844f8a3b0ec974890cadbce5a84c514426c5fdd6e5bb5fdf66509c41a70f",
            "file": "src/app/swap/overlay/overlay.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-overlay",
            "styleUrls": [
                "./overlay.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlay.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showBox",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickedOutside",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openShowBox",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-overlay',\r\n  templateUrl: './overlay.component.html',\r\n  styleUrls: ['./overlay.component.scss']\r\n})\r\nexport class OverlayComponent implements OnInit {\r\n  showBox = false;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  openShowBox(e: Event) {\r\n    e.stopPropagation();\r\n    this.showBox = !this.showBox;\r\n  }\r\n  \r\n  onClickedOutside(e: Event) {\r\n    this.showBox = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    width: 100%;\r\n    height: 200px;\r\n    border: 1px solid gray;  \r\n    padding: 20px;\r\n    box-sizing: border-box;  \r\n}\r\n\r\n\r\n.myBox{\r\n    display: flex;\r\n    align-items: center;\r\n    height: 200px;\r\n    width: 200px;\r\n    background-color: #36a7ff;\r\n    justify-content: center;\r\n    background: rgb(68,179,198);\r\n    background: linear-gradient(160deg, rgba(68,179,198,1) 0%, rgba(159,241,178,1) 50%, rgb(129, 221, 185) 100%);\r\n}\r\n",
                    "styleUrl": "./overlay.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <a href=\"javascript:void(0)\" (click)=\"openShowBox($event)\">show box</a>\r\n    <div class=\"myBox\" \r\n      (clickOutside)=\"onClickedOutside($event)\" \r\n      *ngIf=\"showBox\"\r\n      >\r\n      <div class=\"text\">Click outside this box to hide</div>\r\n      \r\n      \r\n    </div>\r\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PopupFormComponent",
            "id": "component-PopupFormComponent-bb4cc649f9b22e453d53c442c2de54e4c23fa5a2615254bef7a600dbf4f8860e2f91f79b3592b7dd2b05bee3ecf477e0c83adacaa092e241a874785938c899e5",
            "file": "src/app/popup-form/popup-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popup-form",
            "styleUrls": [
                "./popup-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popup-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-popup-form',\r\n  templateUrl: './popup-form.component.html',\r\n  styleUrls: ['./popup-form.component.scss']\r\n})\r\nexport class PopupFormComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.example-form {\r\n    min-width: 150px;\r\n    max-width: 500px;\r\n    width: 100%;\r\n}\r\n  \r\n.example-full-width {\r\n    width: 100%;\r\n}\r\n  ",
                    "styleUrl": "./popup-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n    Drag the dialog around!\r\n    <form class=\"example-form\">\r\n        <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n            <mat-label>Favorite food</mat-label>\r\n            <input matInput placeholder=\"Ex. Pizza\" value=\"Sushi\">\r\n        </mat-form-field>\r\n        \r\n        <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n            <mat-label>Leave a comment</mat-label>\r\n            <textarea matInput placeholder=\"Ex. It makes me feel...\"></textarea>\r\n        </mat-form-field>\r\n\r\n        <button mat-raised-button color=\"primary\">Click</button>\r\n    </form>\r\n</div>"
        },
        {
            "name": "ReactiveFormsValidationComponent",
            "id": "component-ReactiveFormsValidationComponent-0094b9a274ebc95e7ae95bd8ace21760c0994c2775d56ecc4a148f5e62657b095a35672d16d1e60984a9c3b9a5c61128bd5c7af1c2d4189925076409354c02ea",
            "file": "src/app/reactive-forms-validation/reactive-forms-validation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reactive-forms-validation",
            "styleUrls": [
                "./reactive-forms-validation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reactive-forms-validation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "products",
                    "defaultValue": "[\n      { productID: 1, name: 'iPhone', price: 500 },\n      { productID: 2, name: 'Samsung', price: 750 },\n      { productID: 3, name: 'Nokia', price: 300 },\n      { productID: 4, name: 'Motorola', price: 150 },\n      { productID: 5, name: 'Xiomi', price: 120 },\n      { productID: 5, name: 'Meizo', price: 100 }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Product } from '../classes/product';\nimport { HelperService } from '../services/helper.service';\nimport { ProductService } from '../services/product.service';\n\n@Component({\n  selector: 'app-reactive-forms-validation',\n  templateUrl: './reactive-forms-validation.component.html',\n  styleUrls: ['./reactive-forms-validation.component.scss']\n})\nexport class ReactiveFormsValidationComponent implements OnInit {\n  // isSubmit: boolean = false;\n\n  products: Product[]=[\n      { productID: 1, name: 'iPhone', price: 500 },\n      { productID: 2, name: 'Samsung', price: 750 },\n      { productID: 3, name: 'Nokia', price: 300 },\n      { productID: 4, name: 'Motorola', price: 150 },\n      { productID: 5, name: 'Xiomi', price: 120 },\n      { productID: 5, name: 'Meizo', price: 100 }\n  ]\n\n  constructor(private helper: HelperService) { }\n\n  ngOnInit(): void {\n    console.log(\"products: \", this.products);\n  }\n\n  submit() {\n    // this.isSubmit = true;\n    this.helper.setSubmitForm();\n    console.log(\"submit\");\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".products {\r\n    width: calc(100vw - 32px);\r\n    padding: 16px;\r\n    margin: 16px;\r\n    border: 1px solid black;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.title {\r\n    color:turquoise;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n}\r\n\r\n.row {\r\n    margin: 16px 0;\r\n    padding: 16px;\r\n    border: 2px solid gray;\r\n    border-radius: 6px;\r\n    box-sizing: border-box;\r\n}",
                    "styleUrl": "./reactive-forms-validation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "helper",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "helper",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"products\">\n    <div class=\"title\">Products</div>\n    <div class=\"row\" *ngFor=\"let item of products\">\n        <app-form-item [product]=\"item\"></app-form-item>\n    </div>\n\n    <button mat-button color=\"primary\" (click)=\"submit()\">Primary</button>\n</div>\n"
        },
        {
            "name": "SignatureComponent",
            "id": "component-SignatureComponent-be9fe24bc4e470dfe6d67201d64fe8086653a968d45d1715154d726c58ded9a31134ac489eaa85fa6cd38e4ae56fb649d191a14dced97bb8b0745b508f1339d8",
            "file": "src/app/signature/signature.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signature",
            "styleUrls": [
                "./signature.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signature.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isDrawing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "sigPad",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLCanvasElement>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sigPad'"
                        }
                    ]
                },
                {
                    "name": "sigPadElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseMove",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseUp",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mouseup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "relativeCoords",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ x: number; y: number; }",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:mouseup",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ViewChild, HostListener, ElementRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-signature',\r\n  templateUrl: './signature.component.html',\r\n  styleUrls: ['./signature.component.scss']\r\n})\r\nexport class SignatureComponent implements OnInit {\r\n  @Input() name: string;\r\n  @ViewChild('sigPad') sigPad: ElementRef<HTMLCanvasElement>;\r\n  sigPadElement;\r\n  context;\r\n  isDrawing = false;\r\n  img;\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    \r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // debugger;\r\n    this.sigPadElement = this.sigPad?.nativeElement;\r\n    this.context = this.sigPadElement?.getContext('2d');\r\n    this.context.strokeStyle = '#3742fa';\r\n  }\r\n\r\n  @HostListener('document:mouseup', ['$event'])\r\n  onMouseUp(e) {\r\n    this.isDrawing = false;\r\n  }\r\n\r\n  onMouseDown(e) {\r\n    this.isDrawing = true;\r\n    const coords = this.relativeCoords(e);\r\n    this.context.moveTo(coords.x, coords.y);\r\n  }\r\n\r\n  onMouseMove(e) {\r\n    if (this.isDrawing) {\r\n      const coords = this.relativeCoords(e);\r\n      this.context.lineTo(coords.x, coords.y);\r\n      this.context.stroke();\r\n    }\r\n  }\r\n\r\n  private relativeCoords(event) {\r\n    const bounds = event.target.getBoundingClientRect();\r\n    const x = event.clientX - bounds.left;\r\n    const y = event.clientY - bounds.top;\r\n    return { x: x, y: y };\r\n  }\r\n\r\n  clear() {\r\n    this.context.clearRect(0, 0, this.sigPadElement.width, this.sigPadElement.height);\r\n    this.context.beginPath();\r\n  }\r\n\r\n  save() {\r\n    this.img = this.sigPadElement.toDataURL(\"image/png\");\r\n    console.log(this.img);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "canvas {\r\n    border: 1px solid #000;\r\n}\r\n\r\nspan {\r\n    width: 300px;\r\n}",
                    "styleUrl": "./signature.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<canvas #sigPad width=\"300\" height=\"150\" (mousedown)=\"onMouseDown($event)\"\r\n  (mousemove)=\"onMouseMove($event)\">\r\n</canvas>\r\n<br/>\r\n<button (click)=\"clear()\">clear</button>\r\n<button (click)=\"save()\">save</button>\r\n<br/>\r\n<img [src]=\"img\">\r\n<br/>\r\n<span>{{img}}</span>"
        },
        {
            "name": "SwapComponent",
            "id": "component-SwapComponent-fc5621259debe8a2cade35314cce6bfb220a64b38175955f0c234b4a97a64d03d1a03eee5657ce318491ddacbcfbea494341ff8d6f8c2435f45685949f406985",
            "file": "src/app/swap/swap/swap.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-swap",
            "styleUrls": [
                "./swap.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./swap.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-swap',\r\n  templateUrl: './swap.component.html',\r\n  styleUrls: ['./swap.component.scss']\r\n})\r\nexport class SwapComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    direction: rtl;\r\n}\r\n\r\n.right-side,\r\n.left-side {\r\n    padding: 5px;\r\n    box-sizing: border-box;\r\n    width: 50%;\r\n}",
                    "styleUrl": "./swap.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <div class=\"right-side\"><app-delivery></app-delivery></div>\r\n    <div class=\"left-side\"><app-delivery></app-delivery></div>\r\n</div>\r\n\r\n<!-- <div class=\"container\">\r\n    <div class=\"right-side\"><app-overlay></app-overlay></div>\r\n    <div class=\"left-side\"><app-overlay></app-overlay></div>\r\n</div> -->\r\n"
        },
        {
            "name": "SwitchMapComponent",
            "id": "component-SwitchMapComponent-fc968493eb49cfe2f49cf2c036bb5dbe5100aa619193f30a996420c83c21d75898092de3869a2ee942db1b1c13e44c3ec3668337f67acfb3f8b434371a5d0f30",
            "file": "src/app/switch-map/switch-map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-switch-map",
            "styleUrls": [
                "./switch-map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./switch-map.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'button', {static: true}"
                        }
                    ]
                },
                {
                    "name": "carData",
                    "defaultValue": "of([\r\n    {\r\n      brand: 'porsche',\r\n      model: '911'\r\n    },\r\n    {\r\n      brand: 'porsche',\r\n      model: 'macan'\r\n    },\r\n    {\r\n      brand: 'ferarri',\r\n      model: '458'\r\n    },\r\n    {\r\n      brand: 'lamborghini',\r\n      model: 'urus'\r\n    }\r\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "clicks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { BehaviorSubject, from, fromEvent, interval, Observable, of, throwError } from 'rxjs';\r\nimport { catchError, map, delay, mergeMap, switchMap, mergeAll, switchAll, concatMap } from 'rxjs/operators';\r\nimport { Product } from '../classes/product';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ProductService } from '../services/product.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DataSource } from '@angular/cdk/collections';\r\nimport { DataService } from '../services/data-service.service';\r\n\r\n@Component({\r\n  selector: 'app-switch-map',\r\n  templateUrl: './switch-map.component.html',\r\n  styleUrls: ['./switch-map.component.scss']\r\n})\r\nexport class SwitchMapComponent implements OnInit {\r\n  @ViewChild('button', {static:true}) button;\r\n  clicks$: Observable<any>;\r\n\r\n  userData: any;\r\n\r\n  carData = of([\r\n    {\r\n      brand: 'porsche',\r\n      model: '911'\r\n    },\r\n    {\r\n      brand: 'porsche',\r\n      model: 'macan'\r\n    },\r\n    {\r\n      brand: 'ferarri',\r\n      model: '458'\r\n    },\r\n    {\r\n      brand: 'lamborghini',\r\n      model: 'urus'\r\n    }\r\n  ]);\r\n\r\n  constructor(private _Activatedroute: ActivatedRoute,\r\n    private service: ProductService,\r\n    private http: HttpClient,\r\n    private userSrv: DataService) { }\r\n\r\n\r\n\r\n  ngOnInit(): void {\r\n    // this.switchMapExample();\r\n\r\n    // this.clicks$ = fromEvent(this.button.nativeElement, 'click');\r\n    // this.switchExample();\r\n    console.log(\"car data 1: \", this.carData);\r\n\r\n    this.userSrv.getUserData2().subscribe(\r\n      data => {\r\n          if(!data) {\r\n            //TODO\r\n            return;\r\n          }\r\n          this.userData = data;\r\n          console.log(\"data: \", data);\r\n       },\r\n      error => {\r\n        //TODO\r\n          // this.loading = false;\r\n    });\r\n\r\n    this.carData\r\n    .pipe(\r\n      map(cars => cars.map(car => `${car.brand} ${car.model}`))\r\n    ).subscribe(cars => console.log(\"car data 2: \", cars));\r\n\r\n    \r\n    this.carData\r\n      .pipe(\r\n        map(cars => cars.filter(car => car.brand === 'porsche'))\r\n    ).subscribe(cars => console.log(\"car data 3: \", cars))\r\n   \r\n    const getData = (param) => {\r\n      return of(`retrieved new data with param ${param}`).pipe(\r\n        delay(1000)\r\n      )\r\n    }\r\n\r\n    from([1,2,3,4]).pipe(\r\n      map(param => getData(param))\r\n    ).subscribe(val => val.subscribe(data => console.log(\"car data: \", data)));\r\n\r\n    from([1,2,3,4]).pipe(\r\n      map(param => getData(param)),\r\n      mergeAll()\r\n    ).subscribe(val => console.log(\"mergeAll: \", val));\r\n\r\n    from([1,2,3,4]).pipe(\r\n      mergeMap(param => getData(param))\r\n    ).subscribe(val => console.log(\"mergeMap: \", val));\r\n\r\n    from([1,2,3,4]).pipe(\r\n      map(param => getData(param)),\r\n      switchAll()\r\n    ).subscribe(val => console.log(\"switchAll: \", val));\r\n\r\n    from([1,2,3,4]).pipe(\r\n      switchMap(param => getData(param))\r\n    ).subscribe(val => console.log(\"switchMap: \", val));\r\n    \r\n    const filters = ['brand=porsche', 'model=911', 'horsepower=389', 'color=red']\r\n    const activeFilters = new BehaviorSubject('');\r\n    \r\n    const applyFilters = () => {\r\n      filters.forEach((filter, index) => {\r\n        let newFilters = activeFilters.value;\r\n        if (index === 0) {\r\n          newFilters = `?${filter}`\r\n        } else {\r\n          newFilters = `${newFilters}&${filter}`\r\n        }\r\n    \r\n        activeFilters.next(newFilters);\r\n      })\r\n    }\r\n\r\n    activeFilters.pipe(\r\n      switchMap(param => getData(param))\r\n    ).subscribe(val => console.log(\"activeFilters: \", val));\r\n    \r\n    applyFilters();\r\n\r\n\r\n    const getData1 = (param) => {\r\n      const delayTime = Math.floor(Math.random() * 10000) + 1;\r\n      return of(`retrieved new data with params: ${param} and delay: ${delayTime}`).pipe(\r\n        delay(delayTime)\r\n      )\r\n    };\r\n\r\n    // from([1,2,3,4]).pipe(\r\n    //   map(param => getData1(param))\r\n    // ).subscribe(val => val.subscribe(data => console.log('map 1:', data)));\r\n    \r\n    // // using mergeMap\r\n    // from([1, 2, 3 ,4]).pipe(\r\n    //   mergeMap(param => getData1(param))\r\n    // ).subscribe(val => console.log('mergeMap 1:', val));\r\n    \r\n    // using concatMap\r\n    from([1, 2, 3 ,4]).pipe(\r\n      concatMap(param => getData1(param))\r\n    ).subscribe(val => console.log('concatMap 1:', val));\r\n    \r\n    \r\n  }\r\n  \r\n  // switchExample() {\r\n  //   this.clicks$\r\n  //     .pipe(\r\n  //       switchMap(() => {\r\n  //         return interval(500)\r\n  //       })\r\n  //     )\r\n  //     .subscribe( val => console.log(val));\r\n  // }\r\n\r\n  // switchMapExample() {\r\n  //   let srcObservable= of(1,2,3,4)\r\n  //   let innerObservable= of('A','B','C','D')\r\n     \r\n  //   srcObservable.pipe(\r\n  //     switchMap( val => {\r\n  //       console.log('Source value '+val);\r\n  //       console.log('starting new observable');\r\n  //       return innerObservable;\r\n  //     })).subscribe(ret=> {\r\n  //     console.log('Recd ' + ret);\r\n  //   });\r\n  // }\r\n\r\n  \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// .multi-select-container{\r\n//     border: $border;\r\n//     border-radius: 4px;\r\n//     width: inherit;\r\n//     // &:hover{\r\n//     //   border: $callout-border;\r\n//     // }\r\n//   }\r\n//   .multi-select-selection-area{\r\n//     display:flex;\r\n//     justify-content: space-between;\r\n//     align-items: center;\r\n//     border: $border;\r\n//     border-radius: 4px;\r\n//     padding-right:5px;\r\n//     font-size: 9pt;\r\n//     height:30px;\r\n//     cursor:pointer;\r\n//     &:hover{\r\n//       border: $callout-border;\r\n//     }\r\n//   }\r\n//   .multi-select-selection-text{\r\n//     text-overflow: ellipsis;\r\n//     white-space: nowrap;\r\n  \r\n//   }\r\n//   .one-select.mat-form-field{\r\n//       // margin-top: 3px;\r\n//       // width: 100%;\r\n//       line-height: 0.4;\r\n//       &input{\r\n//         border: 1px solid red;\r\n//       }\r\n       \r\n//     }\r\n//   .multi-select-search-block{\r\n//     display: flex;\r\n//     border: 1px solid lime;\r\n//   }\r\n\r\n",
                    "styleUrl": "./switch-map.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_Activatedroute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userSrv",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "_Activatedroute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userSrv",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button #button>Click Me</button>\r\n\r\n<!--Autocomplete-->\r\n<!-- <div *ngIf=\"options\" class=\"multi-select-container\">\r\n  \r\n    <div class=\"multi-select-selection-area\" (click)=\"openMultiselect()\" >\r\n      <span class=\"multi-select-selection-text\">{{selectionText}}</span>  \r\n      <mat-icon>keyboard_arrow_down</mat-icon>\r\n   </div>\r\n  \r\n    <div [hidden]=\"!isOpen\">\r\n    <div class=\"multi-select-search-block\">\r\n      <mat-checkbox class=\"multi-select-checkbox\" [(ngModel)]=\"checkAll\"></mat-checkbox>\r\n      <mat-form-field appearance=\"fill\" class=\"one-select\">\r\n        <input matInput type=\"text\" #inputAutoComplete\r\n        [matAutocomplete]=\"auto\"\r\n        [formControl]=\"selectControl\" />\r\n      </mat-form-field>\r\n      <mat-icon>cancel</mat-icon>\r\n      \r\n    </div>\r\n    \r\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\r\n      <mat-option *ngFor=\"let data of filteredData | async\" [value]=\"data.Value\">\r\n        <div (click)=\"optionClicked($event, data)\">\r\n          <mat-checkbox [checked]=\"data.Selected\" class=\"multi-select-checkbox\"\r\n            (change)=\"toggleSelection(data)\" \r\n            (click)=\"$event.stopPropagation()\">\r\n            {{ data.Text }}\r\n          </mat-checkbox>\r\n        </div>\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n    </div>\r\n  </div> -->\r\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-cc841deb48d99a1dfeaf62bf7e02a45fc9b744ade3406c8d4498f0ae288e313f6ac21737458ccbd4617c45982db234da3cb438eccd657036964f9b1e0567556f",
            "file": "src/app/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, TemplateRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tooltip',\r\n  templateUrl: './tooltip.component.html',\r\n  styleUrls: ['./tooltip.component.scss']\r\n})\r\nexport class TooltipComponent implements OnInit {\r\n  @Input() text: string;\r\n  @Input() content: TemplateRef<any>;\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$border-color: #ccc;\r\n$tooltip-body-color: #fff;\r\n$tooltip-arrow-width: 10px;\r\n\r\n\r\n.container {\r\n    box-shadow: 0 0 5px rgba(0, 0, 0, .2);\r\n    margin: 1rem;\r\n    margin-top: .7rem;\r\n    min-width: 50px;\r\n    max-width: 400px;\r\n    background: $tooltip-body-color;\r\n    border: 1px solid $border-color;\r\n    pointer-events: none;\r\n    position: relative;\r\n    min-height: 1rem;\r\n    padding: 1rem;\r\n\r\n  &:after,\r\n  &:before {\r\n      content: '';\r\n      display: block;\r\n      position: absolute;\r\n      bottom: 100%;\r\n      width: 0;\r\n      height: 0;\r\n      border-style: solid;\r\n  }\r\n\r\n  &:after {\r\n      left: calc(49% + 2px);\r\n      border-color: transparent transparent $tooltip-body-color transparent;\r\n      border-width: $tooltip-arrow-width;\r\n  }\r\n\r\n  &:before {\r\n      left: calc(49%);\r\n      border-color: transparent transparent $border-color transparent;\r\n      border-width: $tooltip-arrow-width + 2px;\r\n  }\r\n}",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    {{text}}\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-49f0afe860b10bfac512feb7911ec577ff2fdfb70035de073a8deb2794ed5aebe0afe0a264d8a4400a1f3c79a7108bd853a706576b8b791d86bb46ff6a2ac6ef",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ContactsComponent } from './contacts/contacts.component';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { CardsComponent } from './cards/cards.component';\r\nimport { SignatureComponent } from './signature/signature.component';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { NO_ERRORS_SCHEMA } from '@angular/compiler';\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { GridComponent } from './grid/grid.component';\r\n// import { ProductListModule } from '@bit/milena-lib.angular-tutorial.product-list';\r\nimport { SwapComponent } from './swap/swap/swap.component';\r\nimport { DeliveryComponent } from './swap/delivery/delivery.component';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { OverlayComponent } from './swap/overlay/overlay.component';\r\n\r\nimport { ClickOutsideModule } from 'ng-click-outside';\r\nimport { ClickOutsideDirective } from './directives/click-outside.directive';\r\nimport { PopupFormComponent } from './popup-form/popup-form.component';\r\n\r\n// import { MyLibModule } from 'node_modules/milena-lib';\r\nimport { TooltipComponent } from './tooltip/tooltip.component';\r\nimport { TooltipDirective } from './tooltip/tooltip.directive';\r\nimport { CustomDataGridComponent } from './grid/custom-data-grid/custom-data-grid.component';\r\nimport { SwitchMapComponent } from './switch-map/switch-map.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsValidationComponent } from './reactive-forms-validation/reactive-forms-validation.component';\r\nimport { FormItemComponent } from './reactive-forms-validation/form-item/form-item.component';\r\nimport { MultiselectComponent } from './multiselect/multiselect.component';\r\nimport { DragAndDropComponent } from './drag-and-drop/drag-and-drop.component';\r\nimport { DragAndDropDirective } from './drag-and-drop/drag-and-drop.directive';\r\nimport { DragAndDrop1Component } from './drag-and-drop1/drag-and-drop1.component';\r\nimport { DragAndDrop2Component } from './drag-and-drop2/drag-and-drop2.component';\r\nimport { ArraySortPipe, ArrayFilterPipe  } from './drag-and-drop2/array.pipe';\nimport { DragDropDualListComponent } from './drag-and-drop2/drag-drop-dual-list/drag-drop-dual-list.component';\r\n\r\nconst modules = [\r\n  ReactiveFormsModule,\r\n  CdkTreeModule,\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatProgressSpinnerModule,\r\n  MatPaginatorModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatFormFieldModule,\r\n  MatButtonToggleModule,\r\n  MatTreeModule,\r\n  OverlayModule,\r\n  PortalModule,\r\n  MatBadgeModule,\r\n  MatGridListModule,\r\n  MatRadioModule,\r\n  MatDatepickerModule,\r\n  MatTooltipModule,\r\n  FlexLayoutModule,\r\n  DragDropModule,\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ContactsComponent,\r\n    HomeComponent,\r\n    CardsComponent,\r\n    SignatureComponent,\r\n    GridComponent,\r\n    SwapComponent,\r\n    DeliveryComponent,\r\n    OverlayComponent,\r\n    ClickOutsideDirective,\r\n    PopupFormComponent,\r\n    TooltipComponent,\r\n    TooltipDirective,\r\n    CustomDataGridComponent,\r\n    SwitchMapComponent,\r\n    ReactiveFormsValidationComponent,\r\n    FormItemComponent,\r\n    MultiselectComponent,\r\n    DragAndDropComponent,\r\n    DragAndDropDirective,\r\n    DragAndDrop1Component,\r\n    DragAndDrop2Component,\r\n    ArraySortPipe, \r\n    ArrayFilterPipe, DragDropDualListComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    // ProductListModule,\r\n    FormsModule,\r\n    ClickOutsideModule,\r\n    // MyLibModule,\r\n    HttpClientModule,\r\n    modules\r\n  ],\r\n  exports: [\r\n    BrowserAnimationsModule,\r\n    SwitchMapComponent,\r\n    \r\n    modules\r\n  ],\r\n  providers: [{provide: OverlayContainer}],\r\n  bootstrap: [AppComponent]\r\n  // schemas: [NO_ERRORS_SCHEMA]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ArrayFilterPipe"
                        },
                        {
                            "name": "ArraySortPipe"
                        },
                        {
                            "name": "CardsComponent"
                        },
                        {
                            "name": "ClickOutsideDirective"
                        },
                        {
                            "name": "ContactsComponent"
                        },
                        {
                            "name": "CustomDataGridComponent"
                        },
                        {
                            "name": "DeliveryComponent"
                        },
                        {
                            "name": "DragAndDrop1Component"
                        },
                        {
                            "name": "DragAndDrop2Component"
                        },
                        {
                            "name": "DragAndDropComponent"
                        },
                        {
                            "name": "DragAndDropDirective"
                        },
                        {
                            "name": "DragDropDualListComponent"
                        },
                        {
                            "name": "FormItemComponent"
                        },
                        {
                            "name": "GridComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "MultiselectComponent"
                        },
                        {
                            "name": "OverlayComponent"
                        },
                        {
                            "name": "PopupFormComponent"
                        },
                        {
                            "name": "ReactiveFormsValidationComponent"
                        },
                        {
                            "name": "SignatureComponent"
                        },
                        {
                            "name": "SwapComponent"
                        },
                        {
                            "name": "SwitchMapComponent"
                        },
                        {
                            "name": "TooltipComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SwitchMapComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-8392ec0327cc336f804664ed8309be04dfbeff07733ceeee2203d7adcf2b2473be675e7250329e5b8126851177699a5d60d2ff50e040f91a633e07aec9cb2140",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CardsComponent } from './cards/cards.component';\r\nimport { CardsGuard } from './cards/cards.guard';\r\nimport { ContactsComponent } from './contacts/contacts.component';\r\nimport { GridComponent } from './grid/grid.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { SignatureComponent } from './signature/signature.component';\r\nimport { SwapComponent } from './swap/swap/swap.component';\r\nimport { SwitchMapComponent } from './switch-map/switch-map.component';\r\nimport { ReactiveFormsValidationComponent } from './reactive-forms-validation/reactive-forms-validation.component';\r\nimport { MultiselectComponent } from './multiselect/multiselect.component';\r\nimport { DragAndDropComponent } from './drag-and-drop/drag-and-drop.component';\r\nimport { DragAndDrop1Component } from './drag-and-drop1/drag-and-drop1.component';\r\nimport { DragDropDualListComponent } from './drag-and-drop2/drag-drop-dual-list/drag-drop-dual-list.component';\r\n\r\nconst routes: Routes = [\r\n  {path: 'home', component: HomeComponent},\r\n  {path: 'contacts', component: ContactsComponent, canActivate: [CardsGuard]},\r\n  {path: 'cards', component: CardsComponent, canActivate: [CardsGuard]},\r\n  {path: 'grid', component: GridComponent, canActivate: [CardsGuard]},\r\n  {path: 'signature', component: SignatureComponent, canActivate: [CardsGuard]},\r\n  {path: 'swap', component: SwapComponent},\r\n  {path: 'switch-map', component: SwitchMapComponent},\r\n  {path: 'form-valid', component: ReactiveFormsValidationComponent},\r\n  {path: 'multiselect', component: MultiselectComponent},\r\n  {path: 'drag-and-drop', component: DragAndDropComponent},\r\n  {path: 'drag-and-drop1', component: DragAndDrop1Component},\r\n  {path: 'drag-drop-dual-list', component: DragDropDualListComponent},\r\n  {path: '', redirectTo: '/home', pathMatch: 'full'},\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n  providers: [CardsGuard]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "COLORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\r\n    'maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple', 'fuchsia', 'lime', 'teal',\r\n    'aqua', 'blue', 'navy', 'black', 'gray'\r\n]",
                "rawdescription": "Constants used to fill up our data base.",
                "description": "<p>Constants used to fill up our data base.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  ReactiveFormsModule,\r\n  CdkTreeModule,\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatProgressSpinnerModule,\r\n  MatPaginatorModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatFormFieldModule,\r\n  MatButtonToggleModule,\r\n  MatTreeModule,\r\n  OverlayModule,\r\n  PortalModule,\r\n  MatBadgeModule,\r\n  MatGridListModule,\r\n  MatRadioModule,\r\n  MatDatepickerModule,\r\n  MatTooltipModule,\r\n  FlexLayoutModule,\r\n  DragDropModule,\r\n]"
            },
            {
                "name": "NAMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\r\n    'Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack', 'Charlotte', 'Theodore', 'Isla', 'Oliver',\r\n    'Isabella', 'Jasper', 'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'\r\n]"
            },
            {
                "name": "orderby",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/drag-and-drop2/array.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('lodash.orderby')"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/drag-and-drop2/array.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "GridColumnTypeEnum",
                "childs": [
                    {
                        "name": "text",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dateTime",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "link",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/grid/enums.ts"
            }
        ],
        "groupedVariables": {
            "src/app/constants/constants.ts": [
                {
                    "name": "COLORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\r\n    'maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple', 'fuchsia', 'lime', 'teal',\r\n    'aqua', 'blue', 'navy', 'black', 'gray'\r\n]",
                    "rawdescription": "Constants used to fill up our data base.",
                    "description": "<p>Constants used to fill up our data base.</p>\n"
                },
                {
                    "name": "NAMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\r\n    'Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack', 'Charlotte', 'Theodore', 'Isla', 'Oliver',\r\n    'Isabella', 'Jasper', 'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'\r\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  ReactiveFormsModule,\r\n  CdkTreeModule,\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatProgressSpinnerModule,\r\n  MatPaginatorModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatFormFieldModule,\r\n  MatButtonToggleModule,\r\n  MatTreeModule,\r\n  OverlayModule,\r\n  PortalModule,\r\n  MatBadgeModule,\r\n  MatGridListModule,\r\n  MatRadioModule,\r\n  MatDatepickerModule,\r\n  MatTooltipModule,\r\n  FlexLayoutModule,\r\n  DragDropModule,\r\n]"
                }
            ],
            "src/app/drag-and-drop2/array.pipe.ts": [
                {
                    "name": "orderby",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/drag-and-drop2/array.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('lodash.orderby')"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/drag-and-drop2/array.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/grid/enums.ts": [
                {
                    "name": "GridColumnTypeEnum",
                    "childs": [
                        {
                            "name": "text",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dateTime",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "link",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/grid/enums.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "contacts",
                        "component": "ContactsComponent",
                        "canActivate": [
                            "CardsGuard"
                        ]
                    },
                    {
                        "path": "cards",
                        "component": "CardsComponent",
                        "canActivate": [
                            "CardsGuard"
                        ]
                    },
                    {
                        "path": "grid",
                        "component": "GridComponent",
                        "canActivate": [
                            "CardsGuard"
                        ]
                    },
                    {
                        "path": "signature",
                        "component": "SignatureComponent",
                        "canActivate": [
                            "CardsGuard"
                        ]
                    },
                    {
                        "path": "swap",
                        "component": "SwapComponent"
                    },
                    {
                        "path": "switch-map",
                        "component": "SwitchMapComponent"
                    },
                    {
                        "path": "form-valid",
                        "component": "ReactiveFormsValidationComponent"
                    },
                    {
                        "path": "multiselect",
                        "component": "MultiselectComponent"
                    },
                    {
                        "path": "drag-and-drop",
                        "component": "DragAndDropComponent"
                    },
                    {
                        "path": "drag-and-drop1",
                        "component": "DragAndDrop1Component"
                    },
                    {
                        "path": "drag-drop-dual-list",
                        "component": "DragDropDualListComponent"
                    },
                    {
                        "path": "",
                        "redirectTo": "/home",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 7,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cards/cards.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/cards/cards.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CardsGuard",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/product.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLORS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAMES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/contacts/contacts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/click-outside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/drag-and-drop/drag-and-drop.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DragAndDropComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/drag-and-drop/drag-and-drop.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DragAndDropDirective",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/drag-and-drop1/drag-and-drop1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DragAndDrop1Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/drag-and-drop2/array.pipe.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SortOptions",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/drag-and-drop2/array.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ArrayFilterPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/drag-and-drop2/array.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ArraySortPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/drag-and-drop2/array.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "orderby",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/drag-and-drop2/array.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/drag-and-drop2/drag-and-drop2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DragAndDrop2Component",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/drag-and-drop2/drag-drop-dual-list/drag-drop-dual-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DragDropDualListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/drag-and-drop2/dual-list-box.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IItemsMovedEvent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/drag-and-drop2/dual-list-box.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IListBoxItem",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/grid/custom-data-grid/custom-data-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomDataGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/grid/grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/grid/i-column.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IColumn",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/grid/i-custom-grid-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICustomGridModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/i-grid-events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGridEvents",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/multiselect/multiselect.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiselectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/multiselect/multiselect.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AreaGroup",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/multiselect/multiselect.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "City",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/popup-form/popup-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/reactive-forms-validation/form-item/form-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormItemComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/reactive-forms-validation/reactive-forms-validation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReactiveFormsValidationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/data-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/helper.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelperService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/product.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/signature/signature.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignatureComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/swap/delivery/delivery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeliveryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/swap/overlay/overlay.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OverlayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/swap/swap/swap.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/switch-map/switch-map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwitchMapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}